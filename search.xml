<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>怎么给女朋友天天发爱心邮件?</title>
      <link href="/zen-me-gei-nu-peng-you-tian-tian-fa-ai-xin-you-jian.html"/>
      <url>/zen-me-gei-nu-peng-you-tian-tian-fa-ai-xin-you-jian.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>当然，我是没有女朋友的，主要是我的一个朋友(当然不是我)想要一个女朋友，我就做了一个定时任务，天天给他邮件，让他过个瘾。当然读文章的女同胞也可以考虑加我讨论一下问题，QQ在下方。好了不皮了，正文如下。</p></blockquote><blockquote><p>环境：</p><blockquote><p>java: 1.8<br>springboot: 2.2.0</p></blockquote></blockquote><p>主要分成两个模块，一是发邮件，二是定时发送消息，学过springboot的同学相信已经知道怎么实现。</p><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><p>利用QQ邮箱发送消息, 看一段配置</p><pre class=" language-yml"><code class="language-yml">spring:  mail:    username: xxxxxxxx@qq.com    password: xxxxxxxx    host: smtp.qq.com    properties:      mail:        stmp:          ssl:            enable: true</code></pre><ul><li>username：就是你的qq邮箱</li><li>password：不是你的qq密码，进入qq邮箱-&gt;(网页上方)设置-&gt;账户-&gt;IMAP/SMTP服务: 开启</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendEmail</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> JavaMailSenderImpl mailSender<span class="token punctuation">;</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span>String title<span class="token punctuation">,</span> String words<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>            MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"xxxx@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"yyyy@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//上传文件</span><span class="token comment" spellcheck="true">//            helper.addAttachment();</span>            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送异常--发给："</span> <span class="token operator">++</span> <span class="token string">"yyyy@qq.com, "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发送邮件差不多就是这么多了, 这个是支持html解析的, new MimeMessageHelper(mimeMessage, true) 就是打开解析html。</p><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><p>定时任务也很简单就是通过 @Scheduled注解实现的，记得启动类上要加上 @EnableScheduling 来开启定时任务</p><p>yml配置</p><pre class=" language-yml"><code class="language-yml">#定时任务time:  cron:    morning: 0 20 7 * * ?    noon: 0 20 11,18 * * ?    night: 0 0 22 * * ?</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SendEmail sendEmail<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Environment environment<span class="token punctuation">;</span>    Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"${time.cron.morning}"</span><span class="token punctuation">)</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMorning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String title <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"config.title.morning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String words <span class="token operator">=</span> manageText<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"config.wordspath.morning"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发送早安邮件给: "</span> <span class="token operator">+</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"config.sendto"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sendEmail<span class="token punctuation">.</span><span class="token function">sendEmail</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://www.jianshu.com/p/1defb0f22ed1" target="_blank" rel="noopener">定时任务表达式</a></p><h2 id="文案"><a href="#文案" class="headerlink" title="文案"></a>文案</h2><p>文案是我从知乎上偷的，放在一个文件夹下。写了一个工具类读取resources下文件，但是比较坑的就是再本地跑是没问题的，但是一旦打成jar包，运行起来就不能用，不能读取resources下的自定义文件夹。所以我就把文件放下外面，与jar同级目录 , 例如读取 static 文件夹 ，访问路径就是 ./static .</p><p>感觉后期可以改成爬虫，自动爬取，挂在服务器上，反正文件夹下的文件是在jar包之外的，就可以随便修改。但是本身在爬虫这一块不是很熟，以后有机会再写。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉还是很好玩的，就是发给男生太gay了，有点恶心，文字都是我自己选的。再就是注意到springboot打包以后，读取文件夹还是感觉这个方案不是很好，放在外面会不会不太安全，但是像我这种修改起来就很方便。对于单个文件是有处理方案的，但是对于遍历文件夹下的所有文件感觉不是太好处理。</p><p>给出源码链接(内附部署问题)：<a href="https://github.com/shanqianyouyu/love-email" target="_blank" rel="noopener">https://github.com/shanqianyouyu/love-email</a></p><blockquote><p>有问题可以加我讨论。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初窥RabbitMQ</title>
      <link href="/chu-kui-rabbitmq.html"/>
      <url>/chu-kui-rabbitmq.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>之前笼统的了解了消息队列，但是一直感觉不太清楚。这次专门学习了一下概念，算是相对之前清楚了很多吧。</p></blockquote><h2 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h2><h3 id="AMQP：Advanced-Message-Queuing-Protocol-高级消息队列协议"><a href="#AMQP：Advanced-Message-Queuing-Protocol-高级消息队列协议" class="headerlink" title="AMQP：Advanced Message Queuing Protocol(高级消息队列协议)"></a>AMQP：Advanced Message Queuing Protocol(高级消息队列协议)</h3><ul><li>Server：又称Broker，接受客户端的连接，实现AMQP实体服务</li><li>Connection：连接，应用程序与Broker的网络连接</li><li>Channel：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道。客户端可建立多个Channel，每个Channel代表一个会话任务。</li><li>Message：消息，服务器和应用程序之间传送的数据，有Properties和Body组成。Properties可以对消息进行修饰，比如消息的优先级，延迟等高等级特性；Body则就是消息体内容</li><li>Virtual host：虚拟地址，用于进行逻辑隔离，最上层的消息路由。一个Virtual Host里面可以有多、若干个Exchange和Queue，同一个Virtual Host里面不能有相同名称的Exchange或Queue</li><li>Exchange：交换机，接收消息，根据路由键转发消息到绑定的队列</li><li>Binding：Exchange和Queue之间的虚拟连接，binding中可以包含routing key</li><li>Routing key：一个路由规则，虚拟机可用它来确定如何确定一个特定的消息</li><li>Queue：也成为Message Queue，消息队列，保存消息并将他们转发给消费者</li></ul><p><img src="/img/消息队列/初窥RabbitMQ/AMQP协议模型.png" alt="AMQP协议模型"></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><h5 id="关于应用"><a href="#关于应用" class="headerlink" title="关于应用"></a>关于应用</h5><p>关闭应用</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl stop_app</code></pre><p>启动应用</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl start_app</code></pre><p>结点状态</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl status</code></pre><h5 id="关于用户"><a href="#关于用户" class="headerlink" title="关于用户"></a>关于用户</h5><p>添加用户</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl add_user username password</code></pre><p>列出所有用户</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl list_users</code></pre><p>删除用户</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl delete_user username</code></pre><p>清除权限</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl clear_permissions -p vhostpath username</code></pre><h5 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h5><pre class=" language-bash"><code class="language-bash">rabbitmqctl add_vhost vhostpath</code></pre><p>列出虚拟主机</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl list_vhosts</code></pre><p>列出虚拟主机上所有权限</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl list_permissions -o vhostpath</code></pre><p>删除虚拟主机</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl delete_vhost vhostpath</code></pre><h5 id="队列操作"><a href="#队列操作" class="headerlink" title="队列操作"></a>队列操作</h5><p>查看所有队列信息</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl list_queues</code></pre><p>清除队列里信息</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl -p vhostpath purge_queue blue</code></pre><h4 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h4><p>移除所有操作，要在关闭应用之后操作</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl reset</code></pre><p>组成集群命令</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl join_cluster <span class="token operator">&lt;</span>clusternode<span class="token operator">></span> <span class="token punctuation">[</span>--ram<span class="token punctuation">]</span></code></pre><p>查看集群状态</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl cluester_status</code></pre><p>忘记结点(摘除节点)</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl forget_cluester_node <span class="token punctuation">[</span>--offline<span class="token punctuation">]</span></code></pre><p>修改集群节点的存储形式</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl change_cluster_node_type disc<span class="token operator">|</span><span class="token function">ram</span></code></pre><p>修改节点名称</p><pre class=" language-bash"><code class="language-bash">rabbitmqctl rename_cluster_node oldnode1 newnode1 <span class="token punctuation">[</span>oldnode2<span class="token punctuation">]</span> <span class="token punctuation">[</span>newnode2 <span class="token punctuation">..</span>.<span class="token punctuation">]</span></code></pre><h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><p><img src="/img/消息队列/初窥RabbitMQ/Exchange交换机.png" alt=""></p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ul><li>Name: 交换机名称</li><li>Type: 交换机类型 direct, topic, fanout, headers(不常用)<ul><li>Direct: 发到Exchange的消息都会被转发到RouteKey中指定的Queue</li></ul></li></ul><p><img src="/img/消息队列/初窥RabbitMQ/Exchange.png" alt="Exchange"></p><ul><li>Topic: 发到该Exchange的消息会被转发到所有关心 RouteKey 中指定 Topic 的Queue上, Exchange 将 RouteKey和某Topic 进行模糊匹配，此时队列需要绑定一个Topic<ul><li>#: 匹配一个或多个词</li><li>*: 匹配一个词</li></ul></li></ul><p><img src="/img/消息队列/初窥RabbitMQ/TopicExchange.png" alt="topic"></p><ul><li>Fanout: 不处理路由键，只需要简单的将队列绑定到交换机上, 发送到交换机的消息都会被转发到与该交换机绑定的所有队列上，转发最快</li></ul><p><img src="/img/消息队列/初窥RabbitMQ/FanoutExchange.png" alt="fanout"></p><blockquote><p>Direct模式可以用 RabbitMQ自带的Exchange:default Exchange, 不需要进行任何绑定操作，消息传递时，RouteKey必须完全匹配才会被队列接收，否则会抛弃</p></blockquote><ul><li>Durability: 是否需要持久化, true为持久化</li><li>Auto Delete: 当最后一个绑定到Exchange上的队列删除后，自动删除Exchange</li><li>Internal: 当前Exchange是否用于RabbitMQ内部使用，默认为false</li><li>Arguments: 拓展参数，用于拓展AMQP协议自制定化使用</li></ul><h4 id="Binding-绑定"><a href="#Binding-绑定" class="headerlink" title="Binding-绑定"></a>Binding-绑定</h4><ul><li>Exchange和Exchange，Queue之前的连接关系</li><li>Binding中可以包括RoutingKey或者参数</li></ul><h4 id="Queue-消息队列"><a href="#Queue-消息队列" class="headerlink" title="Queue-消息队列"></a>Queue-消息队列</h4><ul><li>实际存储消息数据</li></ul><h4 id="Message-消息"><a href="#Message-消息" class="headerlink" title="Message-消息"></a>Message-消息</h4><ul><li>服务器和应用程序之间传送数据</li><li>本质上就是一段数据，由Properties和Payload(Body)组成</li><li>常用属性：delivery mode, headers(自定义属性)<ul><li>content_type, content_encoding, priority</li><li>conrrelation_id, reply_to, expiration, message_id</li><li>自定义: timestamp, type, user_id, app_id, cluster_id</li></ul></li></ul><h4 id="Virtual-host-虚拟主机"><a href="#Virtual-host-虚拟主机" class="headerlink" title="Virtual host-虚拟主机"></a>Virtual host-虚拟主机</h4><ul><li>虚拟地址，用于进行逻辑隔离，最上层的消息路由</li><li>一个Virtual Host里面可以有若干个Exchange和Queue</li><li>同一个Virtual Host 里面不能有相同名称的Exchange或Queue</li></ul><h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><h3 id="消息如何保障100-的投递成功"><a href="#消息如何保障100-的投递成功" class="headerlink" title="消息如何保障100%的投递成功"></a>消息如何保障100%的投递成功</h3><h4 id="什么是生产端的可靠性投递"><a href="#什么是生产端的可靠性投递" class="headerlink" title="什么是生产端的可靠性投递"></a>什么是生产端的可靠性投递</h4><ol><li>保障消息的成功发出</li><li>保障MQ节点的成功接收</li><li>发送端收到MQ节点 (Broker) 确认应答</li><li>完善的消息进行补偿机制</li></ol><h4 id="生产端-可靠性投递-一"><a href="#生产端-可靠性投递-一" class="headerlink" title="生产端-可靠性投递(一)"></a>生产端-可靠性投递(一)</h4><p>互联网大厂解决方案：</p><ul><li>消息落库，对消息状态进行打标<ul><li>将消息记录到数据库中，对消息进行状态标记。定时轮询处理发送失败的消息</li></ul></li></ul><p><img src="/img/消息队列/初窥RabbitMQ/消息落库状态打标.png" alt="消息落库状态打标"></p><blockquote><p>step1：将订单和消息入库<br>step2：发送消息给MQ节点<br>step3：MQ节点反馈<br>step4：改状态<br>step5：(以分布式案例为例)执行定时任务，抽取状态不对的信息重发(step6)<br>step6: 重发<br>step7：记录重发次数</p><blockquote><p>如果step1 失败，后面不执行(大厂有一套方案：快速失败)<br>如果操作失误路由不对等原因，消息不能达到MQ节点，就会一直重传，显然不合理，通常会限制一个重传次数</p></blockquote></blockquote><ul><li>消息的延迟投递，做二次确认，回调检查(大数据)</li></ul><p><img src="/img/消息队列/初窥RabbitMQ/延迟加载二次确认.png" alt="延迟加载二次确认"></p><blockquote><p>step1: 先持久化订单数据库, 再发送请求到MQ节点<br>step2: 其实与1同步发送确认信息，但是延迟发送<br>step3: 消费端监听指定队列<br>step4: 消费端处理完成发送确认消息到MQ<br>step5: Callback 服务监听处理消息服务，收到确认后将消息持久化到数据库(MSG DB)<br>step6: Callback 服务会监听step2的延迟消息，到消息数据库(MSG DB) 中查找 找到的话就不需要做任何操作了</p><blockquote><p>如果任何操作导致延迟任务确认失败，会调用RPC任务(带回来一个ID)), 重新执行任务，去BIZ库查找，将消息发出去<br>减少数据库持久化操作，异步补偿</p></blockquote></blockquote><h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h3><h4 id="消费端-幂等性保障"><a href="#消费端-幂等性保障" class="headerlink" title="消费端-幂等性保障"></a>消费端-幂等性保障</h4><p>海量订单产生的业务高峰期，如何避免消息的重复消费问题</p><ul><li>消费端实现幂等性，就意味着，我们的消息永远不会消费多次，及时我们收到了多条一样的消息</li></ul><p>业界主流幂等性操作：</p><ul><li><p>唯一ID+指纹码机制，利用数据库主键去重</p><ul><li>SELECT COUNT(1) FROM T_ORDER WHERE ID = 唯一ID + 指纹码</li><li>好处：实现简单</li><li>坏处：高并发下有数据库写入的性能瓶颈</li><li>解决方案：跟进ID进行分库分表进行算法路由</li></ul></li><li><p>利用Redis原子性</p></li></ul><h3 id="Confirm-确认消息"><a href="#Confirm-确认消息" class="headerlink" title="Confirm 确认消息"></a>Confirm 确认消息</h3><h4 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h4><ul><li>消息的确认，是指生产者投递消息后，如果Broker收到消息，则会给我们生产者一个应答</li><li>生产者进行接收应答，用来确认这条消息是否正常的发送Broker，这种方式也是消息的可靠性投递的核心保障</li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol><li>在channel上开启确认模式：channel.confirmSelect()</li><li>在channel上添加监听：addConfirmListener,监听成功和失败的返回结果，根据具体的结果对消息进行重新发送，或记录日志登后续处理</li></ol><h3 id="Return-消息机制"><a href="#Return-消息机制" class="headerlink" title="Return 消息机制"></a>Return 消息机制</h3><ul><li><p>Return Listener用于处理一些不可路由的消息</p><ul><li>我们的消息生产者，通过指定一个Exchange和RoutingKey，把消息送达到一个队列中去，然后我们的消费者监听队列，进行消费处理。某些情况下，如果我们再发送消息的时候，当前的exchange不存在或者指定的key路由不到，这个时候如果我们需要监听这种不可达的消息，就要用到Return Listener</li></ul></li><li><p>关键配置项：Mandatory：如果为true，则监听器会接收到路由不可达的消息，然后进行后续处理，如果为false，那么broker端自动删除该消息</p></li></ul><p><img src="/img/消息队列/初窥RabbitMQ/return消息机制.png" alt="return消息机制"></p><h3 id="消费者限流"><a href="#消费者限流" class="headerlink" title="消费者限流"></a>消费者限流</h3><h4 id="什么是消费者限流"><a href="#什么是消费者限流" class="headerlink" title="什么是消费者限流"></a>什么是消费者限流</h4><ul><li>巨量消息瞬间全部推送过来，但是我们单个客户端无法同时处理这么多数据</li></ul><h4 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h4><ul><li><p>RabbitMQ 提供了一种qos(服务质量保证)功能，即在非自动确认消息的前提下，如果一定数目的消息(国通基于consume或者channel设置的Qos的值)未被确认前，不进行消费新的信息</p></li><li><p>void BasicQos(unit prefetchSize, ushort prefetchCount, bool global)</p><ul><li>prefetchSize : 0</li><li>prefetchCount : 会告诉RabbitMQ不要同时给一个消费者推送多于N个消息，即一旦有N个消息还没有ack，则该consumer将block掉，直到有消息ack</li><li><p>global :  true\false 是否将上面设置应用于 channel ，简单点说，就是上面限制是 channel 级别的还是 consumer 级别</p><ul><li>prefetchSize 和 global 这两项，rabbitmq没有实现，暂且不研究 prefetchCount 在 no_ask=false 的情况下生效，即在自动应答的情况下这两个值是不生效的。</li></ul></li></ul></li></ul><p>自定义消费者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * MyConsumer * * @author chase */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConsumer</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Channel channel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyConsumer</span><span class="token punctuation">(</span>Channel channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>channel <span class="token operator">=</span> channel<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties basicProperties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------consume msg----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumerTag : "</span> <span class="token operator">+</span> consumerTag<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"envelope : "</span> <span class="token operator">+</span> envelope<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"basicProperties : "</span> <span class="token operator">+</span> basicProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bytes : "</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//手动ack</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeoutException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Consumer * * @author chase */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 创建一个ConnectionFactory，进行配置</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.74.129"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 通过连接工厂创建连接</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3 通过 connection 创建一个channel</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4 声明一个队列</span>        String exchangeName <span class="token operator">=</span> <span class="token string">"test_consumer_exchange"</span><span class="token punctuation">;</span>        String routingKey <span class="token operator">=</span> <span class="token string">"consumer.#"</span><span class="token punctuation">;</span>        String queueName <span class="token operator">=</span> <span class="token string">"test_consumer_queue"</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token string">"topic"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> exchangeName<span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5 创建一个消费者</span><span class="token comment" spellcheck="true">//        DefaultConsumer consumer = new DefaultConsumer(channel);</span>        <span class="token comment" spellcheck="true">//6 设置Channel</span>        <span class="token comment" spellcheck="true">/**         * 限流方式         * 1 autoAck 设置为false         * 2 手动ack         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生产者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span> Channel<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span> Connection<span class="token punctuation">;</span> <span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span> ConnectionFactory<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span> IOException<span class="token punctuation">;</span> <span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span> TimeoutException<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/** * Procuder * * @author chase */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Procuder</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1 创建一个ConnectionFactory，进行配置</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"192.168.74.129"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2 通过连接工厂创建连接</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3 通过 connection 创建一个channel</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4 通过Channel 发送数据</span>        String exchange <span class="token operator">=</span> <span class="token string">"test_consumer_exchange"</span><span class="token punctuation">;</span>         String routingKey <span class="token operator">=</span> <span class="token string">"consumer.save"</span><span class="token punctuation">;</span>         String msg <span class="token operator">=</span> <span class="token string">"Hello RabbitMQ Consumer Message"</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="消费端ACK与重回队列"><a href="#消费端ACK与重回队列" class="headerlink" title="消费端ACK与重回队列"></a>消费端ACK与重回队列</h3><h4 id="消费端的手工-ACK-和-NACK"><a href="#消费端的手工-ACK-和-NACK" class="headerlink" title="消费端的手工 ACK 和 NACK"></a>消费端的手工 ACK 和 NACK</h4><ul><li>消费端进行消费的时候，如果由于业务异常我们可以进行日志的记录，然后进行补偿</li><li>如果由于服务器宕机等严重问题，那我们就需要手工进行ACK 保障消费端消费成功</li></ul><h4 id="消费端重回队列"><a href="#消费端重回队列" class="headerlink" title="消费端重回队列"></a>消费端重回队列</h4><ul><li>消费端重回队列是为了对没有处理成功的消息，把消息重新会递给Broker</li><li>一般我们在实际应用中，都会关闭重回队列，也就是设置为False</li></ul><h3 id="死信队列-DLX-Dead-Letter-Exchange"><a href="#死信队列-DLX-Dead-Letter-Exchange" class="headerlink" title="死信队列(DLX: Dead-Letter-Exchange)"></a>死信队列(DLX: Dead-Letter-Exchange)</h3><ul><li>利用DLX, 当消息在一个队列中变成死信(dead message)之后，他能被重新 publish 到另外一个Exchange，这个 Exchange 就是DLX</li></ul><h4 id="什么时候会成为死信队列"><a href="#什么时候会成为死信队列" class="headerlink" title="什么时候会成为死信队列"></a>什么时候会成为死信队列</h4><ul><li>消息被拒绝(basic.reject/basic.nack) 并且 requeue = false</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot补充与RESTful</title>
      <link href="/springboot-bu-chong-yu-restful.html"/>
      <url>/springboot-bu-chong-yu-restful.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-RESTful"><a href="#一-RESTful" class="headerlink" title="一. RESTful"></a>一. RESTful</h1><ul><li>REST是 Represemtational State Transfer 的缩写</li><li>所有的东西都是资源，所有操作都是通过对资源的增删改查(CRUD)实现</li><li>对资源的增删改查对应的URL的操作(POST, DELETE, PUT, GET)</li><li>无状态的</li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li>URL: <a href="http://host/tvseries" target="_blank" rel="noopener">http://host/tvseries</a></li><li>GET: /tvseries 获取电视剧列表</li><li>POST: /tvseries 创建一个新电视剧</li><li>GET：/tvseries/101 获取编号为101的电视剧信息</li><li>PUT：/tvseries/101 修改编号为101的电视剧信息</li><li>DELETE：/tvseries/101 删除编号为101的电视剧</li><li>GET：/tvseries/101/characters 获取编号为101的电视剧的任务列表</li></ul><blockquote><p>URL命名</p><ul><li>/资源名字</li><li>/资源名称/{资源ID}}</li><li>/资源名称/{资源ID}/子资源名称</li><li>/资源名称/{资源ID}/子资源名称/{子资源ID}</li></ul></blockquote><h2 id="开启热部署"><a href="#开启热部署" class="headerlink" title="开启热部署"></a>开启热部署</h2><ol><li>导入依赖</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2.<a href="https://blog.csdn.net/ligh_sqh/article/details/79500575" target="_blank" rel="noopener">开启idea自动编译</a></p><h1 id="二-Bean-Validation"><a href="#二-Bean-Validation" class="headerlink" title="二. Bean Validation"></a>二. Bean Validation</h1><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><table><thead><tr><th>任何类型</th><th>Null, NotNull</th></tr></thead><tbody><tr><td>布尔型</td><td>AssertTrue, AssertFalse</td></tr><tr><td>字符串</td><td>NotBlank, Pattern, Size, Email, DecimalMax, DecimalMin, Digits</td></tr><tr><td>数值</td><td>DecimalMax, DecimalMin, Digits, Max, Min, Negative, NegativeOrZero, Positive, Positive, PositiveOrZero</td></tr><tr><td>集合/Map/List</td><td>NotEmpty, Size</td></tr><tr><td>日期</td><td>Future, Past, FutureOrPresent, PastOrPresent</td></tr></tbody></table><h2 id="注解位置"><a href="#注解位置" class="headerlink" title="注解位置"></a>注解位置</h2><ul><li>Field level 成员变量</li><li>Property level get(is) 方法上(验证返回值))</li><li>Class level 类上</li></ul><blockquote><p>约束规则对子类有效</p></blockquote><p>public Object doSomething(@Validated @RequestBody OneDto oneDto, <kbd>BindingResult result</kbd>){}</p><p>加上 <kbd>BindingResult result</kbd> ，不通过校验也能进入方法</p><h2 id="手动验证"><a href="#手动验证" class="headerlink" title="手动验证"></a>手动验证</h2><h1 id="三-SpringBoot-的单元测试"><a href="#三-SpringBoot-的单元测试" class="headerlink" title="三. SpringBoot 的单元测试"></a>三. SpringBoot 的单元测试</h1><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><ul><li>判断某条件是否为真 Assert.assertTrue(条件表达式)</li><li>判断某条件是否为假 Assert.assertFalse(条件表达式))</li><li>判断两个变量值是否相同 Assert.assertEquals(var1, var2)</li><li>判断两个变量值是否不相同 Assert.assertNotEquals(var1, var2)</li><li>判断两个数组是否相同 Assert.assertArrayEquals(数组1，数组2)</li><li>直接测试失败 Assert.fail() Assert.fail(message)</li></ul><blockquote><p>之前在看spring源码的过程中有很多这种东西，当时不懂是什么东西，才发现只是判断功能</p></blockquote><h2 id="mockito"><a href="#mockito" class="headerlink" title="mockito"></a>mockito</h2><p>实战再学习.</p><h1 id="四-事务-Transactional"><a href="#四-事务-Transactional" class="headerlink" title="四. 事务 @Transactional"></a>四. 事务 @Transactional</h1><ul><li>name          当在配置文件有多个TransactionManager，可以用该属性指定选择哪个事务管理器</li><li>propagation   事务的传播行为，默认值为 REQUIRED<ul><li>Propagation. REQUIRED        如果有事务，那么加入事务，没有则新建</li><li>Propagation. NOT_SUPPORTED   容器不为这个方法开启事务</li><li>Propagation. REQUIRES_NEWS   不管是否存在事务，都创建一个新的事务，原来的挂起，新的执行完毕继续执行老的事务</li><li>Propagation. MANDATORY       必须在一个已有的事务中执行，否则抛出异常</li><li>Propagation. NEVER           必须在一个没有事务中执行，否则抛出异常(与MANDATORY相反)</li><li>Propagation. SUPPORTS        如果其他bean调用这个方法，在其他bean中声明事务，那就用事务. 如果其他bean没有声明事务那就不用事务</li><li>Propagation. NESTED          如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与PROPAGATION_REQUIRED 类似的操作</li></ul></li><li>isolation     事物的隔离度，默认值采用DEFAULT<ul><li>isolation. READ_UNCOMMITTED  读取未提交数据</li><li>isolation. READ_COMMITTED    读已提交数据</li><li>isolation. REPEATABLE_READ   可重复读</li><li>isolation. SERIALIZABLE      串行化</li><li>isolation. DEFAULT           使用数据库默认</li></ul></li><li>timeout       事务的超时时间，默认值为 -1 。如果超过该时间限制但事务还没有完成，则自动回滚事务</li><li>readOnly      指定事务是否为只读事务，默认值为false; 为了忽略那些不需要事物的方法, 比如读取数据, 可以设置 readOnly 为 true</li><li>rollbackFor   指定能够触发事务回滚的异常类型</li><li>noRollbackFor 指定异常的类型，不回滚事务</li></ul><h2 id="isolation-与-lock"><a href="#isolation-与-lock" class="headerlink" title="isolation 与 lock"></a>isolation 与 lock</h2><ul><li>两个不同的东西，隔离不是靠锁实现的，是靠对数据的监控实现的</li><li>锁：表加好锁了，除非出现死锁等特殊情况，事务是不会被数据库主动回滚的</li><li>隔离：如果发现数据不符合相应的事务隔离级别，当前事务会出错并回滚。相比锁被回滚可能较大，需要程序有出错重试的步骤</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入Spring(一):聊聊spring配置与ssm实现内置tomcat</title>
      <link href="/liao-liao-spring-pei-zhi-yu-ssm-shi-xian-nei-zhi-tomcat.html"/>
      <url>/liao-liao-spring-pei-zhi-yu-ssm-shi-xian-nei-zhi-tomcat.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在看<a href="https://space.bilibili.com/436348202/video" target="_blank" rel="noopener">鲁班学院</a>的视频, 深深被子路老师折服, 真的是太强了, 见解也是十分独特。</p></blockquote><h1 id="ssm实现内置tomcat"><a href="#ssm实现内置tomcat" class="headerlink" title="ssm实现内置tomcat"></a>ssm实现内置tomcat</h1><h2 id="启动web项目的三种方法："><a href="#启动web项目的三种方法：" class="headerlink" title="启动web项目的三种方法："></a>启动web项目的三种方法：</h2><ul><li>利用idea，eclipse等等发布到本地tomcat上启动</li><li>利用maven打包启动</li><li>利用内置的tomcat启动</li></ul><p>第一种方法:<br>本质就是利用tomcat加载web.xml的方法，利用web.xml作为方法的入口，利用web.xml加载其他配置完成spring配置。</p><p>第三种：<br>自己定义一个tomcat, 设置一些配置。</p><h2 id="居然能自己定义Tomcat"><a href="#居然能自己定义Tomcat" class="headerlink" title="居然能自己定义Tomcat?"></a><b>居然能自己定义Tomcat?</b></h2><p>Tomcat是用Java语言开发，所以说tomcat的启动必然是一个main()函数，如果我们想实现内置tomcat，那么也可以通过导入tomcat的核心包，像springboot一样用自己的tomcat启动。自己new一个tomcat, 至于他是怎么工作的就是socket方面的知识了。</p><p>需要导入的两个依赖:</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--core--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.5.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!--jsp--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat.embed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-embed-jasper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.5.45<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>实现:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> LifecycleException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        Tomcat tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tomcat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">addWebapp</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"d:\\Desktop\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tomcat<span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动这个类就相当于启动了一个tomcat容器。</p><h1 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h1><p>之前对spring配置很不了解，对于导包也是一堆复制粘贴, 今天就看看完成一个springMVC需要用到哪些包。</p><p>先看一段网上的配置：</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring版本号 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>4.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mybatis版本号 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mybatis.version</span><span class="token punctuation">></span></span>3.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mybatis.version</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- log4j日志文件管理包版本 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slf4j.version</span><span class="token punctuation">></span></span>1.7.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slf4j.version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log4j.version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log4j.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 表示开发的时候引入，发布的时候不会加载此包 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- spring核心包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-oxm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context-support<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mybatis核心包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mybatis/spring包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 导入java ee jar 包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javaee-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 导入Mysql数据库链接jar包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 导入dbcp的jar包，用来在applicationContext.xml中配置数据库 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbcp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- JSTL标签类 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jstl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志文件管理包 --></span>        <span class="token comment" spellcheck="true">&lt;!-- log start --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${log4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 格式化对象，方便输出日志 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.41<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${slf4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- log end --></span>        <span class="token comment" spellcheck="true">&lt;!-- 映入JSON --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.codehaus.jackson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-mapper-asl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 上传组件包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>当然这是一个完整的ssm项目, 包含了一些日志文件和mybatis及其他组件，比较多，但其实很多包都是不用这么导入的。<br>先看看实现一个springmvc需要的依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>其实只需要一个依赖，至于那些core，web导入了他其实就都有了。</p><p><img src="/img/深入spring/一/1.png" alt="1"></p><p>以内置tomcat为例。</p><p>启动了tomcat以后，这个类也会启动，tomcat在启动的时候会调用所有实现 WebApplicationInitializer 的方法。</p><blockquote><p>我自己在尝试的过程中，发现直接发布到本地的tomcat上，这个类不会起作用，但是利用maven打包的方式尚未尝试，具体问题有待考证。</p></blockquote><p>先添加一个配置类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ctgu<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ComponentScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableWebMvc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * AppConfig * * @author chase */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.ctgu"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ctgu<span class="token punctuation">.</span>init<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ctgu<span class="token punctuation">.</span>config<span class="token punctuation">.</span>AppConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>WebApplicationInitializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>AnnotationConfigWebApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRegistration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * MyWebApplicationInitializer * * @author chase */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebApplicationInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * tomcat 在初始化 web容器的时候会调用 onStartup()     * ServletContext web上下文     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigWebApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ac<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//ac.refresh();</span>        DispatcherServlet servlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span>        ServletRegistration<span class="token punctuation">.</span>Dynamic registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">"registration"</span><span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"*.do"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>在spring的官方文档中是有 refresh()这一步的，但是我自己在尝试的过程中添加了refresh()，但是在后面的配置类中添加注解 @EnableWebMvc 会抛出异常，tomcat会启动失败，具体原因还不得而知。但是refresh()不是spring在初始化中最重要的一步吗？spring会再此完成spring bean的生命周期等等.具体问题有待考证.</p></blockquote><p><kbd>AnnotationConfigWebApplicationContext</kbd>就是一个与spring相关加载配置的类，也就是大家以前看到的 <kbd>ClassPathXmlApplicationContext</kbd> 这个好像是在spring4.5推出的，这个在官方文档中是有的，但是如果是看视频，一般的教学视频都很老了，有的甚至是用3在讲，所以说学习知识还是看官方文档比较好。<br>AnnotationConfigWebApplicationContext.register() 是加载配置类。</p><p>Controller层：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/query.do"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"query-controller..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>访问一下: localhost:9090/query.do<br>会发现控制台打印了：query-controller…</p><blockquote><p>其实在spring的xml配置也是类似差不多，通过 web.xml 加载扫描，加载spring配置，加载mvc.xml,mybatis.xml配置,但是我感觉不用xml全注解的情况下更加直观，知道自己在做什么。<br>以上就是spring零配置实现了。从原来的 web.xml 进入变成了通过实现 <kbd>WebApplicationInitializer</kbd> 进入.</p></blockquote><p>当然这么点配置远远不够，更多配置请移步<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">官方文档</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 深入Spring </category>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim入门</title>
      <link href="/vim-ru-men.html"/>
      <url>/vim-ru-men.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>早就听说Vim是宇宙第一编辑器，之前只会保存编辑，很多功能都不会，今天抽了点时间学了一下指令，记录一下。 </p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h2><ol><li>普通模式：Esc</li><li>插入模式：i或者a或者c</li><li>可视模式：<ul><li>普通可视 v</li><li>行可视 V</li><li>块可视 ctrl+v</li></ul></li></ol><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>普通模式下：</p><ul><li>h 左移</li><li>j 下移</li><li>k 上移</li><li><p>l 右移</p></li><li><p>u 撤回</p></li><li>gg 回到行首</li></ul><h2 id="单词移动"><a href="#单词移动" class="headerlink" title="单词移动"></a>单词移动</h2><p>普通模式下：</p><ul><li>w     正向移动到下一单词的靠头</li><li>b     反向移动到当前单词/上一单词的开头</li><li>e     正向移动到当前单词/下一单词的结尾</li><li>ge    反向移动到上一单词的结尾</li></ul><h2 id="字符移动"><a href="#字符移动" class="headerlink" title="字符移动"></a>字符移动</h2><p>f{char}     正向移到下一个{char}所在之处<br>F{char}     反向移到下一个{char}所在之处<br>t{char}     正向移到下一个{char}所在之处的前一个字符上<br>T{char}     反向移到下一个{char}所在之处的后一个字符上</p><blockquote><p>;     重复上次字符查找命令<br>,     反转方向查找上次字符的查找命令</p></blockquote><h2 id="文本对象"><a href="#文本对象" class="headerlink" title="文本对象"></a>文本对象</h2><blockquote><p>i-in  a-around</p></blockquote><ul><li>a) 或 ab      一对圆括号</li><li>i) 或 ib      圆括号内部</li><li>at            一对XML标签\&lt;xml&gt;tags\&lt;\/xml&gt;</li><li>it            xml标签内部</li><li>iw            当前单词</li><li>aw            当前单词加一个空格</li><li>iW            当前字串</li><li>aW            当前字串加一个空格</li><li>is            当前句子</li><li>as            当前句子及一个空格</li><li>ip            当前段落</li><li>ap            当前段落及一个空行</li></ul><h2 id="操作符待决模式"><a href="#操作符待决模式" class="headerlink" title="操作符待决模式"></a>操作符待决模式</h2><table><thead><tr><th>d{motion}</th><th>删除模式</th><th>dd删除一行</th></tr></thead><tbody><tr><td>c{motion}</td><td>修改模式</td><td>cc删除一行</td></tr><tr><td>y{motion}</td><td>复制模式</td><td>yy复制一行</td></tr><tr><td>v{motion}</td><td>可视模式</td><td>-</td></tr></tbody></table><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><ul><li>m{mark}   设置标记</li><li>`{mark}   返回标记(esc下面的键位)</li></ul><h2 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h2><ul><li>ctrl+f    下翻一页</li><li>ctrl+b    上翻一页</li><li>ctrl+d    下翻半页</li><li>ctrl+u    上翻半页</li></ul><h2 id="查找与替换"><a href="#查找与替换" class="headerlink" title="查找与替换"></a>查找与替换</h2><table><thead><tr><th>/{pattern}</th><th>查找</th><th>使用n跳转</th></tr></thead><tbody><tr><td>:%s/{pattern}/{string}/g</td><td>替换</td><td>使用c进行替换确认</td></tr></tbody></table><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>这里配置只是为了文本好看，就没有搞花里胡哨的，或者添加别的功能。</p><pre class=" language-bash"><code class="language-bash">vim ~/.vimrc</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token keyword">set</span> tabstop<span class="token operator">=</span>4<span class="token keyword">set</span> softtabstop<span class="token operator">=</span>4<span class="token keyword">set</span> shiftwidth<span class="token operator">=</span>4<span class="token keyword">set</span> autoindent<span class="token keyword">set</span> cindent<span class="token keyword">set</span> cinoptions<span class="token operator">=</span><span class="token punctuation">{</span>0,1s,t0,n-2,p2s,<span class="token punctuation">(</span>03s,<span class="token operator">=</span>.5s,<span class="token operator">></span>1s,<span class="token operator">=</span>1s,:1s<span class="token keyword">set</span> nu<span class="token keyword">set</span> ruler<span class="token keyword">set</span> hlsearch<span class="token keyword">set</span> backspace<span class="token operator">=</span>2</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从源码看AOP</title>
      <link href="/cong-yuan-ma-kan-aop.html"/>
      <url>/cong-yuan-ma-kan-aop.html</url>
      
        <content type="html"><![CDATA[<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><blockquote><p>spring官网：</p><ul><li>与OOP(Object Oriented Programming 面向对象)对比，传统的OOP开发中的代码逻辑是自上而下，在这些之上而下的过程中会产生写横切行的问题，而这些横切行的问题又与我们的主业务逻辑关系不大, 会散落在代码的各个地方，造成难以维护</li></ul></blockquote><blockquote><ul><li>AOP的编程思想就是把这些横切性的问题和主业务逻辑进行分离，从而起到解耦的目的</li></ul></blockquote><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><blockquote><p>SpringBoot2.0以上的版本默认的是使用Cglib作动态代理，我试了半天才发现，坑死我了。</p></blockquote><p>两种方式:</p><ul><li>JDK动态代理</li><li>cglib动态代理</li></ul><p>spring实现动态代理取决于代理对象时候是接口</p><ul><li>接口：jdk代理</li><li>类：cglib代理</li></ul><p>决定代理的核心代码</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> AopProxy <span class="token function">createAopProxy</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token keyword">throws</span> AopConfigException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token function">isOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>config<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"TargetSource cannot determine target class: Either an interface or a target is required for proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>AopProxy<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">!</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ObjenesisCglibAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>config.isOptimize() 和 config.isProxyTargetClass()默认是false, this.hasNoUserSuppliedProxyInterfaces(config)判断是否有接口。</p><h2 id="为什么jdk动态代理必须是接口"><a href="#为什么jdk动态代理必须是接口" class="headerlink" title="为什么jdk动态代理必须是接口?"></a>为什么jdk动态代理必须是接口?</h2><p>一.<br>此处被代理的对象接口是 <strong>UserService</strong><br>我们将动态代理的核心代码反编译一下发现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> $Proxy <span class="token keyword">extends</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>Java是单继承的，生成的代理对象继承了Proxy就不能继承别的类了</p><p>二.</p><blockquote><p>代码看核心，看创建代理对象部分即可</p></blockquote><p>JDK动态代理</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代理类的实现</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDKProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 要被代理的目标对象     */</span>    <span class="token keyword">private</span> A target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">JDKProxy</span><span class="token punctuation">(</span>A target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target<span class="token operator">=</span>target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建代理类     * @return     */</span>    <span class="token keyword">public</span> ExInterface <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>ExInterface<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 调用被代理类(目标对象)的任意方法都会触发invoke方法     * @param proxy 代理类     * @param method 被代理类的方法     * @param args 被代理类的方法参数     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//过滤不需要该业务的方法</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"execute"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用前验证权限</span>            AuthCheck<span class="token punctuation">.</span><span class="token function">authCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用目标对象的方法</span>            Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//记录日志数据</span>            Report<span class="token punctuation">.</span><span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>eles <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//.....</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果不需要增强直接执行原方法</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>JDK动态代理在创建代理对象的时候，会用到接口，没有接口就无法创建。其实它的本质可能就是用传入的接口创建一个新类(代理类)，新类实现了接口，继承了Proxy类。所以jdk动态代理对象必须有接口。</p><p>Cglib动态代理</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CGLibProxy</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 被代理的目标类     */</span>    <span class="token keyword">private</span> A target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CGLibProxy</span><span class="token punctuation">(</span>A target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建代理对象     * @return     */</span>    <span class="token keyword">public</span> A <span class="token function">createProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用CGLIB生成代理:</span>        <span class="token comment" spellcheck="true">// 1.声明增强类实例,用于生产代理类</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.设置被代理类字节码，CGLIB根据字节码生成被代理类的子类</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.//设置回调函数，即一个方法拦截</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4.创建代理:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 回调函数     * @param proxy 代理对象     * @param method 委托类方法     * @param args 方法参数     * @param methodProxy 每个被代理的方法都对应一个MethodProxy对象，     *                    methodProxy.invokeSuper方法最终调用委托类(目标类)的原始方法     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//过滤不需要该业务的方法</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"execute"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//调用前验证权限(动态添加其他要执行业务)</span>          AuthCheck<span class="token punctuation">.</span><span class="token function">authCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//调用目标对象的方法(执行A对象即被代理对象的execute方法)</span>          Object result <span class="token operator">=</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//记录日志数据(动态添加其他要执行业务)</span>          Report<span class="token punctuation">.</span><span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> result<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//.....</span>          <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//如果不需要增强直接执行原方法</span>      <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Cglib不需要用到接口,底层是通过继承实现的动态代理.</p><p>参考文章：<br><a href="https://www.cnblogs.com/frankliiu-java/articles/1896443.html" target="_blank" rel="noopener">https://www.cnblogs.com/frankliiu-java/articles/1896443.html</a><br><a href="https://blog.csdn.net/javazejian/article/details/56267036" target="_blank" rel="noopener">https://blog.csdn.net/javazejian/article/details/56267036</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/docker-ru-men.html"/>
      <url>/docker-ru-men.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><blockquote><p>前言： 如果你学过Maven,Git那么学习docker就会觉得很简单。如果你写过shell脚本，那么编写docker容器就很容易。</p></blockquote><h2 id="Docker与传统虚拟化方式"><a href="#Docker与传统虚拟化方式" class="headerlink" title="Docker与传统虚拟化方式"></a>Docker与传统虚拟化方式</h2><p>虚拟机缺点:</p><ol><li>资源占用多</li><li>冗余步骤多</li><li>启动慢</li></ol><p>不同之处：</p><ul><li>传统虚拟化技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上在运行所需应用进程</li><li>而容器内得应用进程直接运行于宿主得内核，容器没有自己得内核，而且也没有进行硬件虚拟。因此要比传统虚拟机更为轻便</li></ul><p>优势：</p><ul><li>轻量，秒级得快速启动速度</li><li>简单，易用，活跃的社区</li><li>标准统一的打包/部署/运行方案</li><li>镜像支持增量分发，易于部署</li><li>易于构建，良好的REST API，也很适合自动化测试和持续集成</li><li>性能，尤其是内存和IO的开销</li></ul><p>(Centos下仅支持6.5以上的版本)</p><h2 id="Docker三要素"><a href="#Docker三要素" class="headerlink" title="Docker三要素"></a>Docker三要素</h2><ol><li>(类模板)镜像(image)：一个只读模板。镜像可以来创建Docker容器，一个镜像可以创建很多容器。</li><li>(对象实例)容器(container)：看作是一个简易版的Linux环境(包括root用户权限，进程空间，用户空间和网络空间等) 和运行在其中的应用程序</li></ol><blockquote><p>容器的定义和镜像几乎一模一样，也是一堆层的统一视角，唯一的区别在于容器的最上面那一层是可读可写的。</p></blockquote><ol start="3"><li>仓库(repository)：集中存放镜像文件的场所。</li></ol><h2 id="Centos7安装Docker"><a href="#Centos7安装Docker" class="headerlink" title="Centos7安装Docker"></a>Centos7安装Docker</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#卸载旧版本</span>yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engineyum <span class="token function">install</span> -y yum-utils \  device-mapper-persistent-data \  lvm2yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repoyum <span class="token function">install</span> docker-ce docker-ce-cli containerd.iosystemctl start docker</code></pre><p>配置阿里镜像</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /etc/dockervim <span class="token function">tee</span> /etc/docker/daemon.json<span class="token comment" spellcheck="true">#编写文本如下</span><span class="token punctuation">{</span>  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://we9yfuxn.mirror.aliyuncs.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>systemctl daemon-reloadsystemctl restart docker</code></pre><h3 id="运行一个hello-world镜像"><a href="#运行一个hello-world镜像" class="headerlink" title="运行一个hello world镜像"></a>运行一个hello world镜像</h3><pre class=" language-bash"><code class="language-bash">docker run hello-world</code></pre><blockquote><p>运行的整个过程类似于maven的工作过程，现在本地找，然后去远程docker仓库查找</p></blockquote><h2 id="运行底层原理"><a href="#运行底层原理" class="headerlink" title="运行底层原理"></a>运行底层原理</h2><p style="text-indent:2em">Docker是一个Clinet-Server结构的系统，Docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从客户端接收命令并管理运行在主机上的容器。容器是一个运行时的环境。</p><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><p>帮助命令</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看版本信息</span>docker version<span class="token comment" spellcheck="true">#具体信息</span>docker info<span class="token comment" spellcheck="true">#查看命令</span>docker --help</code></pre><p>镜像命令</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看本地镜像</span>docker images<span class="token comment" spellcheck="true">#查找镜像[列出收藏数不小于指定值的镜像]]</span>docker search <span class="token punctuation">[</span>-s number<span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#拉取镜像</span>docker pull <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#删除镜像</span>docker rmi <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token operator">&lt;</span>ID1<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>iD2<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#删除全部镜像</span>docker rmi -qa</code></pre><p>容器命令</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动容器</span>docker run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#OPTIONS说明</span><span class="token comment" spellcheck="true">#--name='容器新名字'：为容器指定一个名称</span><span class="token comment" spellcheck="true">#-d:后台运行容器，并返回容器ID,也即启动守护式容器(如果没有可交互的前端，会自动退出)</span><span class="token comment" spellcheck="true">#-i:以交互式模式运行容器，通常与-t同时运行</span><span class="token comment" spellcheck="true">#-t:为容器重新分配一个伪输入终端，通常与-i同时使用</span><span class="token comment" spellcheck="true">#列出当前所有正在运行的容器</span>docker <span class="token function">ps</span> <span class="token comment" spellcheck="true">#容器推出</span><span class="token keyword">exit</span>        <span class="token comment" spellcheck="true">#容器停止退出</span>ctrl+P+Q    <span class="token comment" spellcheck="true">#容器不停止退出</span><span class="token comment" spellcheck="true">#启动容器</span>docker start <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#重启容器</span>docker restart <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#停止容器，缓慢停止</span>docker stop <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token comment" spellcheck="true">#强制停止</span>docker <span class="token function">kill</span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#删除已经停止的容器</span>docker <span class="token function">rm</span> <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#-f     强制关闭并删除</span><span class="token comment" spellcheck="true">#查看容器日志</span>docker logs -f -t --tail <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#-t                 时间戳</span><span class="token comment" spellcheck="true">#-f                 跟随最新的日志打印</span><span class="token comment" spellcheck="true">#--tail &lt;number>    显示最后多少条</span><span class="token comment" spellcheck="true">#查看容器内进程</span>docker <span class="token function">top</span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#查看容器内部细节</span>docker inspect <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#重新进入容器并以命令行交互</span>docker attach <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#不用进入容器</span>docker <span class="token function">exec</span> -t <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>bashShell<span class="token operator">></span><span class="token comment" spellcheck="true">#将容器内的文件拷贝到主机上</span>docker <span class="token function">cp</span> <span class="token operator">&lt;</span>name<span class="token operator">></span>:<span class="token operator">&lt;</span>容器内路径<span class="token operator">></span> <span class="token operator">&lt;</span>目的主机路径<span class="token operator">></span><span class="token comment" spellcheck="true">#映射docker镜像端口&lt;port2>到主机端口&lt;port1></span>docker run -it -p <span class="token operator">&lt;</span>port1<span class="token operator">></span>:<span class="token operator">&lt;</span>port2<span class="token operator">></span> <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#随机映射端口</span>docker run -it -P <span class="token operator">&lt;</span>name<span class="token operator">></span><span class="token comment" spellcheck="true">#提交</span>docker commit</code></pre><h2 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h2><p>特点：</p><ol><li>数据卷可在容器之间共享或重用数据 </li><li>卷中更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止</li></ol><pre class=" language-bash"><code class="language-bash">docker run -it -v /宿主机绝对路径目录:/容器内目录 镜像名</code></pre><p>容器卷如果设置只读权限，就只能主机到docker的单向传递，禁止容器内对文件的修改 </p><h3 id="DockerFile添加"><a href="#DockerFile添加" class="headerlink" title="DockerFile添加"></a>DockerFile添加</h3><ol><li>根目录下新建mydocker文件夹并进入</li><li><p>可在Dockerfile中使用VOLUME指令来给镜像添加一个或多个数据卷</p></li><li><p>File构建    </p><ul><li>编写dockfile文件<pre class=" language-bash"><code class="language-bash">FROM centosVOLUME <span class="token punctuation">[</span><span class="token string">"/dataVolumeContainer1"</span>,<span class="token string">"/dataVolumeContainer2"</span><span class="token punctuation">]</span>CMD <span class="token keyword">echo</span> <span class="token string">"finished,----------------success1"</span>CMD /bin/bash</code></pre></li></ul></li><li>build后生成镜像<pre class=" language-bash"><code class="language-bash">docker build -f /mydocker/dockerfile -t chase/centos <span class="token keyword">.</span></code></pre></li><li>run容器<pre class=" language-bash"><code class="language-bash">docker run -it chase/centos</code></pre></li><li>可以通过 docker inspect指令来查看主机文件夹位置<pre class=" language-txt"><code class="language-txt">Mounts": [        {            "Type": "volume",            "Name": "80ff2bad3416d0a21727d1c652aec78c0d9150b613a914ba9a7a65339d1f2625",            "Source": "/var/lib/docker/volumes/80ff2bad3416d0a21727d1c652aec78c0d9150b613a914ba9a7a65339d1f2625/_data",            "Destination": "/dataVolumeContainer2",            "Driver": "local",            "Mode": "",            "RW": true,            "Propagation": ""        },</code></pre>可以看出文件夹位置是 /var/lib/docker/volumes/80ff2bad3416d0a21727d1c652aec78c0d9150b613a914ba9a7a65339d1f2625/对应/dataVolumeContainer2</li></ol><h3 id="容器间数据卷共享"><a href="#容器间数据卷共享" class="headerlink" title="容器间数据卷共享"></a>容器间数据卷共享</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动一个父容器</span>docker run -it --name dc01 chase/centosdocker run -it --name dc02 --volumes-from dc01 chase/centosdocker run -it --name dc03 --volumes-from dc01 chase/centos</code></pre><blockquote><p>由上文可以知道，创建chase/centos的时候会创建容器数据卷，所以dc01，dc02，dc03都各自有两个容器数据卷，且这两个容器数据卷在三个容器中均是同步的，例如：在dc01中创建文件 dc01.txt 在其余两个容器中也会有 dc01.txt 文件。即使关闭dc01容器，同步过程依然存在</p></blockquote><h2 id="DockerFile解析"><a href="#DockerFile解析" class="headerlink" title="DockerFile解析"></a>DockerFile解析</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li>每条保留字指令都必须为大写字母且后面都跟随至少一个参数</li><li>指令按照从上到下，顺序执行</li><li># 表示注释</li><li>每条指令都会创建一个新的镜像层，并对镜像进行提交</li></ol><h3 id="docker三个阶段"><a href="#docker三个阶段" class="headerlink" title="docker三个阶段"></a>docker三个阶段</h3><ul><li>DockerFile是软件的原材料</li><li>Docker镜像是软件的交付品</li><li>Docker容器则可以认为是软件的运行状态</li></ul><blockquote><p>DockerFile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维</p></blockquote><p><img src="/img/docker/入门/docker的三个阶段.png" alt="docker的三个阶段"></p><h3 id="DockerFile体系结构"><a href="#DockerFile体系结构" class="headerlink" title="DockerFile体系结构"></a>DockerFile体系结构</h3><h4 id="1-FROM"><a href="#1-FROM" class="headerlink" title="1. FROM"></a>1. FROM</h4><p>基础镜像，当前镜像是基于哪个镜像的</p><h4 id="2-MAINTAINER"><a href="#2-MAINTAINER" class="headerlink" title="2. MAINTAINER"></a>2. MAINTAINER</h4><p>镜像维护者的姓名与邮箱地址</p><h4 id="3-RUN"><a href="#3-RUN" class="headerlink" title="3. RUN"></a>3. RUN</h4><p>容器构建时需要运行的命令</p><h4 id="4-EXPOSE"><a href="#4-EXPOSE" class="headerlink" title="4. EXPOSE"></a>4. EXPOSE</h4><p>当前容器对外暴露出的端口</p><h4 id="5-WORKDIR"><a href="#5-WORKDIR" class="headerlink" title="5. WORKDIR"></a>5. WORKDIR</h4><p>指定在创建容器后，终端默认登录的进来工作目录，一个落脚点</p><h4 id="6-ENV"><a href="#6-ENV" class="headerlink" title="6. ENV"></a>6. ENV</h4><p>用来构建镜像过程中设置环境变量(key-value键值对)</p><h4 id="7-ADD"><a href="#7-ADD" class="headerlink" title="7. ADD"></a>7. ADD</h4><p>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</p><h4 id="8-COPY"><a href="#8-COPY" class="headerlink" title="8. COPY"></a>8. COPY</h4><p>类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中&lt;源路径&gt; 的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt; 位置</p><h4 id="9-VOLUME"><a href="#9-VOLUME" class="headerlink" title="9. VOLUME"></a>9. VOLUME</h4><p>容器数据卷，用于数据保存和持久化工作</p><h4 id="10-CMD"><a href="#10-CMD" class="headerlink" title="10. CMD"></a>10. CMD</h4><p>指定一个容器启动时要运行的命令。DockerFile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</p><h4 id="11-ENTRYPOINT"><a href="#11-ENTRYPOINT" class="headerlink" title="11. ENTRYPOINT"></a>11. ENTRYPOINT</h4><p>指定一个容器启动时要运行的命令。ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数</p><h4 id="12-ONBUILD"><a href="#12-ONBUILD" class="headerlink" title="12. ONBUILD"></a>12. ONBUILD</h4><p>带构建一个被继承的DockerFile时运行命令，父镜像在被子镜像继承后父镜像的build被触发</p><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote><p>Base镜像(scratch)-Docker Hub 中99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的 </p></blockquote><ol><li>编写：编写DockerFile文件</li><li>构建</li></ol><pre class=" language-bash"><code class="language-bash">docker build -t 新镜像名字:TAG <span class="token keyword">.</span></code></pre><ol start="3"><li>运行</li></ol><pre class=" language-bash"><code class="language-bash">docker run -it 新镜像名字:TAG</code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="使centos镜像支持vim，默认进入位置为-usr-local并且支持ifconfig"><a href="#使centos镜像支持vim，默认进入位置为-usr-local并且支持ifconfig" class="headerlink" title="使centos镜像支持vim，默认进入位置为 /usr/local并且支持ifconfig"></a>使centos镜像支持vim，默认进入位置为 /usr/local并且支持ifconfig</h4><p>文件路径: /mydocker/ 下 dockerfile2 文件</p><pre class=" language-bash"><code class="language-bash">FROM centosENV MYPATH /usr/localWORKDIR <span class="token variable">$MYPATH</span>RUN yum -y <span class="token function">install</span> vimRUN yum -y <span class="token function">install</span> net-toolsEXPOSE 80CMD <span class="token keyword">echo</span> <span class="token variable">$MYPATH</span>CMD <span class="token keyword">echo</span> <span class="token string">"success-----------ok"</span>CMD /bin/bash</code></pre><p>构建:</p><pre class=" language-bash"><code class="language-bash">docker build -f /mydocker/dockerfile2 -t mycentos:1.3 <span class="token keyword">.</span></code></pre><p>运行：</p><pre class=" language-bash"><code class="language-bash">docker run -it mycentos:1.3</code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动mysql</span>docker run -p 12345:3306 --name mysql -v /chase/mysql/conf:/etc/mysql/conf.d -v /chase/mysql/logs -v /chase/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD<span class="token operator">=</span>123456 -d mysql:5.7</code></pre><p>说明：映射到3306，并建立两个容器数据卷，方便修改配置和查看日志，以密码123456启动</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#导出数据库</span>docker <span class="token function">exec</span> <span class="token operator">&lt;</span>id<span class="token operator">></span> sh -c <span class="token string">' exec mysqldump --all-databases -uroot -p"123456" '</span> <span class="token operator">></span> /chase/all-databases.sql</code></pre><p>说明：exec使不进入docker就执行命令，将所有数据库导出到本机的/chase/all-databases.sql 中</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的简单使用</title>
      <link href="/redis-de-jian-dan-shi-yong.html"/>
      <url>/redis-de-jian-dan-shi-yong.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Redis：C语言编写的Nosql数据库(非关系数据库),数据保存在内存中。</p></blockquote><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul><li>数据保存在内存中</li><li>不定期持久化，保证数据安全</li><li>跨语言</li><li>支持集群</li></ul><table><thead><tr><th></th><th>mysql</th><th>redis</th><th>memcache</th></tr></thead><tbody><tr><td>类型</td><td>关系型</td><td>非关系型</td><td>非关系型</td></tr><tr><td>存储位置</td><td>磁盘</td><td>磁盘和内存</td><td>内存</td></tr><tr><td>存储过期</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>读写性能</td><td>低</td><td>非常高</td><td>非常高</td></tr></tbody></table><blockquote><p>redis支持的类型比memcache多</p></blockquote><p>##使用场景</p><ul><li>缓存(<strong><em>**</em></strong>可以做mybatis的二级缓存)</li><li><p>计数器应用</p><ul><li>网站需要统计注册用户数，网站总浏览次数</li><li>新浪微博转发数，点赞数<br>(能自增，自减)</li></ul></li><li><p>实时防攻击系统：</p><ul><li>防暴力破解：试密码</li></ul></li><li><p>排行榜</p></li><li>设定有效期(自动过期)</li><li>自动去重应用(set数据结构)</li><li>队列<ul><li>秒杀</li></ul></li><li>消息订阅系统</li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li>redis-benchmark.exe ：性能测试工具</li><li>redis-cli.exe ： 客户端</li><li>redis-server.exe : 服务端</li><li>redis-check-aof.exe : 检测持久化文件完好</li><li>redis.windows.conf : 配置文件 </li></ul><h2 id="redis使用"><a href="#redis使用" class="headerlink" title="redis使用"></a>redis使用</h2><h3 id="启动redis服务："><a href="#启动redis服务：" class="headerlink" title="启动redis服务："></a>启动redis服务：</h3><p>带配置文件启动</p><pre class=" language-bash"><code class="language-bash">redis-server.exe redis.windows.conf</code></pre><p>关闭窗口则会关闭redis</p><h3 id="连接到redis"><a href="#连接到redis" class="headerlink" title="连接到redis"></a>连接到redis</h3><p>cmd &gt; {redis路径} redis-cli ip地址 -p 端口号<br>ip默认本地，-p默认6379</p><pre class=" language-bash"><code class="language-bash">redis-cli.exe -h 127.0.0.1 -p 6379</code></pre><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#选中数据库，默认有0-15号数据库</span><span class="token keyword">select</span> num<span class="token comment" spellcheck="true">#设置一个key对应一个value</span><span class="token keyword">set</span> key value<span class="token comment" spellcheck="true">#取一个key对应的值</span>get key<span class="token comment" spellcheck="true">#设置一个key的过期时间</span>expire key seconds<span class="token comment" spellcheck="true">#查看一个key的剩余过期时间</span>ttl key<span class="token comment" spellcheck="true">#查看所有的key</span>keys *<span class="token comment" spellcheck="true">#设置多个key-value</span>mset key1 value1 key2 value2<span class="token comment" spellcheck="true">#根据key返回value</span>mget key1 key2<span class="token comment" spellcheck="true">#将key中存储的数据增1(key不存在，则初始化为0，再加1)</span>incr key<span class="token comment" spellcheck="true">#将key中存储的数字值减1(key不存在，则初始化为0.再减1)</span>decr keyincrBy keydecrBy key<span class="token comment" spellcheck="true"># 删除key</span>del key<span class="token comment" spellcheck="true">#清除所有数据库</span>flushall<span class="token comment" spellcheck="true">#清除当前库</span>flushdb</code></pre><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>在配置文件添加</p><pre class=" language-txt"><code class="language-txt">#此处密码设置为chaserequirepass chase</code></pre><p>登录校验密码：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#密码认证</span>auth chase</code></pre><h2 id="配制文件"><a href="#配制文件" class="headerlink" title="配制文件"></a>配制文件</h2><p>以前没注意过，先给出。</p><pre class=" language-txt"><code class="language-txt"># 1k => 1000 bytes# 1kb => 1024 bytes# 1m => 1000000 bytes# 1mb => 1024*1024 bytes# 1g => 1000000000 bytes# 1gb => 1024*1024*1024 bytes</code></pre><pre class=" language-txt"><code class="language-txt">#设置秒数，超过时间不操作则断开连接，0为不会断开timeout 0 #日志级别loglevel notice#日志文件位置 当前文件夹下logs文件夹下的redis.log文件下logfile ./logs/redis.log#设置数据库数量databases 16#持久化策略，900秒有一次改变就持久化一次，300秒内有10次改变就持久化一次，60秒有10000次改变就持久化一次save 900 1save 300 10save 60 10000#持久化文件的位置dbfilename dump.rdb#是否开启持久化appendonly no</code></pre><h3 id="对list集合的常用操作"><a href="#对list集合的常用操作" class="headerlink" title="对list集合的常用操作"></a>对list集合的常用操作</h3><blockquote><p>list看成是左右排列的集合</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#向列表中从左边推送两个值</span>lpush key value1lpush key value2<span class="token comment" spellcheck="true">#从左边显示 start 到 stop 的值，stop 为-1表示最后一个</span>lrange key start stop<span class="token comment" spellcheck="true">#左边弹出一个值</span>lpop key<span class="token comment" spellcheck="true">#根据count值移除列表key中与参数value对应的元素</span>lrem key count value<span class="token comment" spellcheck="true">#exp:</span><span class="token comment" spellcheck="true">#删除student中，从左边数的第一个 zs</span>lrem stuents 1 zs<span class="token comment" spellcheck="true">#删除student中，从左边数的前两个 zs</span>lrem stuents 2 zs<span class="token comment" spellcheck="true">#删除student中，所有的张三</span>lrem stuents 0 zs<span class="token comment" spellcheck="true">#删除student中，从右边数的第一个 zs</span>lrem stuents -1 zs<span class="token comment" spellcheck="true">#删除student中，从右边数的前两个 zs</span>lrem stuents -2 zs</code></pre><h2 id="Jedis操作redis"><a href="#Jedis操作redis" class="headerlink" title="Jedis操作redis"></a>Jedis操作redis</h2><h3 id="简单直接操作"><a href="#简单直接操作" class="headerlink" title="简单直接操作"></a>简单直接操作</h3><p>导包:</p><ul><li>commons-pool2-2.2.jar</li><li>jedis-2.5.2.jar</li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建连接</span>        Jedis connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//登录密码</span>        connection<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"chase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行连接</span>        connection<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建连接</span>        Jedis connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"chase"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行连接</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="jedis连接池"><a href="#jedis连接池" class="headerlink" title="jedis连接池"></a>jedis连接池</h3><p>作用：</p><ul><li>限定最大连接，防止系统崩溃</li><li>节约资源</li><li>节约时间</li></ul><p>配置：</p><ul><li>最大连接数</li><li>最小连接数</li><li>最大等待时间</li><li>测试连接是否畅通</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周记(一)</title>
      <link href="/zhou-ji-yi.html"/>
      <url>/zhou-ji-yi.html</url>
      
        <content type="html"><![CDATA[<p style="text-indent:2em;">马上就要大三了，压力越来越大了。有时候觉得自己的目标越来越清晰，但是又好像越来越迷茫了，也不知道是考研好还是找工作。虽然每天感觉很忙，但是感觉好像没学到什么实质的东西。一直说要学好基础，但是确实连jsp九大内置对象都记不太清。一直嚷嚷着要学spring源码，但是好像只是学了一部分。看书也是只看到一半。什么东西都是浅尝辄止，学了一点，但是好像都是没有深入，每次说着先了解再深入，但是深入这一步总是都一半好像就完了。有时候真的是感觉自己好像言行不太一致。</p><br><p style="text-indent:2em;">今天是数据库考试前夕，真的是很讨厌讨厌复习，每次复习都要搞一些别的东西再去复习，结果复习不完。。。现在像记录一些琐碎的东西，希望能起到鞭策自己的作用。我自己还是比较倾向于找工作的，真的很讨厌学习线代，高数，政治什么的，实在是提不起兴趣，而且对待考研的话，其实也没有一个明确的目标。在这一点我十分佩服我的师傅的，完全凭借自己的爱好学习了安全方面的知识，如果是我肯定远远达不到他的高度，而且目标也很明确，学习的热情也很高。而对于我，好像有点混的感觉。前一段时间也是在学习ssm的时候遇到各种bug十分沮丧，改也不会改，学长也都不在，进度就十分缓慢。再想想我师傅，%%%%。</p><br><p style="text-indent:2em;">上周就是在学计算机网络，感觉还行，也不是完全在背，带着理解在学习，因为计网本身就是比较重要的东西，配置服务器什么的，或者学一些Linux相关的东西，还是要知道一些相关的知识还是要通透一些。这周复习数据库看能不能学一下数据库一些东西。再就是跟着写一个淘淘商城的项目，其实主要也不是学习怎么写后台，感觉主要是学一些别的，一些开发的习惯，一些之前没有学的东西，比如说nginx使用，负载均衡，图片服务器fastdfs搭建，还有后面的消息队列和redis。其实主要也是作了一些了解。后面一定要记得学一些更加重要的东西，比如说，nginx更多的配置，实现一些别的功能，分布式的fastdfs怎么搭建，以及一些为什么使用这些东西，和一些原理。多多总结，多多提高.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 周记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于nginx和FastDFS搭建图片服务器</title>
      <link href="/ji-yu-nginx-he-fastdfs-da-jian-tu-pian-fu-wu-qi.html"/>
      <url>/ji-yu-nginx-he-fastdfs-da-jian-tu-pian-fu-wu-qi.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>环境: Centos7<br>工具: VMware Workstation , SecureCRT<br>PS：我是用的SecureCRT连接虚拟机操作的</p></blockquote><h2 id="关于FastDFS"><a href="#关于FastDFS" class="headerlink" title="关于FastDFS"></a>关于<a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener">FastDFS</a></h2><blockquote><p>FastDFS是用c语言编写的一款开源的分布式文件系统。FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p></blockquote><p>给出余庆老师的<a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener">Github</a>链接,开源万岁！</p><h4 id="Tracker-Server-跟踪服务器"><a href="#Tracker-Server-跟踪服务器" class="headerlink" title="Tracker Server 跟踪服务器"></a>Tracker Server 跟踪服务器</h4><p style="text-indent:2em;">主要做调度工作，起到均衡的作用；负责管理所有的 storage server<br>和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳.</p><h4 id="Storage-Server-存储服务器"><a href="#Storage-Server-存储服务器" class="headerlink" title="Storage Server 存储服务器"></a>Storage Server 存储服务器</h4><p style="text-indent:2em;">主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份</p><h4 id="Client-客户端"><a href="#Client-客户端" class="headerlink" title="Client 客户端"></a>Client 客户端</h4><p style="text-indent:2em;">上传下载数据的服务器，也就是我们自己的项目所部署在的服务器</p><p><br></p><p>架构<br><img src="/img/基于nginx和fastdfs搭建图片服务器/fastdfs架构图.png" alt="架构图"></p><p>文件上传<br><img src="/img/基于nginx和fastdfs搭建图片服务器/文件上传流程.png" alt="架构图"><br>文件下载<br><img src="/img/基于nginx和fastdfs搭建图片服务器/文件下载流程.png" alt="架构图"></p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="1-搭建gcc环境"><a href="#1-搭建gcc环境" class="headerlink" title="1.搭建gcc环境"></a>1.搭建gcc环境</h3><p>该服务器是基于编写的，所以会用到c的环境</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> gcc</code></pre><h3 id="2-安装libevent工具包"><a href="#2-安装libevent工具包" class="headerlink" title="2. 安装libevent工具包"></a>2. 安装libevent工具包</h3><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> libevent</code></pre><h3 id="3-安装libfastcommonV1-0-7工具包"><a href="#3-安装libfastcommonV1-0-7工具包" class="headerlink" title="3. 安装libfastcommonV1.0.7工具包"></a>3. 安装libfastcommonV1.0.7工具包</h3><p>上传文件<kbd>libfastcommonV1.0.7.tar.gz</kbd>，<kbd>fastdfs-nginx-module_v1.16.tar.gz</kbd>,<kbd>FastDFS_v5.05.tar.gz</kbd>到服务器上，后面会用到</p><h4 id="3-1-解压文件"><a href="#3-1-解压文件" class="headerlink" title="3.1 解压文件"></a>3.1 解压文件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxf libfastcommonV1.0.7.tar.gz</code></pre><h4 id="3-2-编译make-h"><a href="#3-2-编译make-h" class="headerlink" title="3.2 编译make.h"></a>3.2 编译make.h</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> libfastcommon-1.0.7/   <span class="token comment" spellcheck="true">#进入解压文件下</span>./make.h</code></pre><p>若报错</p><pre class=" language-text"><code class="language-text">./make.sh:行99: perl: 未找到命令./make.sh:行100: perl: 未找到命令cc  -c -fPIC -o sockopt.lo sockopt.c  sockopt.c: 在函数‘tcpsendfile_ex’中:sockopt.c:1246:35: 错误：‘remain_bytes’未声明(在此函数内第一次使用)  *total_send_bytes = file_bytes - remain_bytes;                                   ^sockopt.c:1246:35: 附注：每个未声明的标识符在其出现的函数内只报告一次make: *** [sockopt.lo] 错误 1</code></pre><p>执行:</p><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> zlib zlib-devel pcre pcre-devel gcc gcc-c++ openssl openssl-devel libevent libevent-devel perl unzip net-tools <span class="token function">wget</span>  </code></pre><p>不报错则进入下一步</p><h4 id="3-3-安装"><a href="#3-3-安装" class="headerlink" title="3.3 安装"></a>3.3 安装</h4><pre class=" language-bash"><code class="language-bash">./make.sh <span class="token function">install</span></code></pre><h4 id="3-4-把-usr-lib64-libfastcommon-so文件向-usr-lib-下复制一份"><a href="#3-4-把-usr-lib64-libfastcommon-so文件向-usr-lib-下复制一份" class="headerlink" title="3.4 把/usr/lib64/libfastcommon.so文件向/usr/lib/下复制一份"></a>3.4 把/usr/lib64/libfastcommon.so文件向/usr/lib/下复制一份</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /usr/lib64/libfastcommon.so /usr/lib/</code></pre><h3 id="4-安装Tracker服务"><a href="#4-安装Tracker服务" class="headerlink" title="4. 安装Tracker服务"></a>4. 安装Tracker服务</h3><h4 id="4-1-解压缩文件"><a href="#4-1-解压缩文件" class="headerlink" title="4.1 解压缩文件"></a>4.1 解压缩文件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxf FastDFS_v5.05.tar.gz</code></pre><h4 id="4-2-编译文件"><a href="#4-2-编译文件" class="headerlink" title="4.2 编译文件"></a>4.2 编译文件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> FastDFS./make.sh</code></pre><h4 id="4-3-安装"><a href="#4-3-安装" class="headerlink" title="4.3 安装"></a>4.3 安装</h4><pre class=" language-bash"><code class="language-bash">./make.sh <span class="token function">install</span></code></pre><blockquote><p>安装后在/usr/bin/目录下有以fdfs开头的文件都是编译出来的。</p></blockquote><h4 id="4-4-移动文件"><a href="#4-4-移动文件" class="headerlink" title="4.4 移动文件"></a>4.4 移动文件</h4><p>4、把/root/FastDFS/conf目录下的所有的配置文件都复制到/etc/fdfs下。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /root/FastDFS/conf/* /etc/fdfs</code></pre><h4 id="4-5-配置tracker服务"><a href="#4-5-配置tracker服务" class="headerlink" title="4.5 配置tracker服务"></a>4.5 配置tracker服务</h4><p>修改 <strong>/etc/fdfs/tracker.conf</strong> 文件</p><pre class=" language-txt"><code class="language-txt"># the base path to store data and log filesbase_path=/home/fastdfs/tracker  #要保证/home/fastdfs/tracker存在</code></pre><h4 id="4-6-启动tracker"><a href="#4-6-启动tracker" class="headerlink" title="4.6 启动tracker"></a>4.6 启动tracker</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动</span>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf<span class="token comment" spellcheck="true">#重启</span>/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</code></pre><h3 id="安装storage命令"><a href="#安装storage命令" class="headerlink" title="安装storage命令"></a>安装storage命令</h3><h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h4><p>修改 <strong>/etc/fdfs/storage.conf</strong> 文件，共计三处</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#第41行  </span><span class="token comment" spellcheck="true"># the base path to store data and log files</span>base_path<span class="token operator">=</span>/home/fastdfs/storage<span class="token comment" spellcheck="true">#要保证该路径存在</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#第109行 </span><span class="token comment" spellcheck="true"># store_path#, based 0, if store_path0 not exists, it's value is base_path</span><span class="token comment" spellcheck="true"># the paths must be exist</span>store_path0<span class="token operator">=</span>/home/fastdfs/storage<span class="token comment" spellcheck="true">#要保证该路径存在</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#第118行</span><span class="token comment" spellcheck="true"># tracker_server can ocur more than once, and tracker_server format is</span><span class="token comment" spellcheck="true">#  "host:port", host can be hostname or ip address</span>tracker_server<span class="token operator">=</span>192.168.74.129:22122<span class="token comment" spellcheck="true"># 这里的192.168.74.129 记住是你自己的虚拟机ip，切记</span></code></pre><h4 id="2-启动storage服务"><a href="#2-启动storage服务" class="headerlink" title="2. 启动storage服务"></a>2. 启动storage服务</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#启动</span>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf<span class="token comment" spellcheck="true">#重启</span>/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</code></pre><h3 id="测试服务"><a href="#测试服务" class="headerlink" title="测试服务"></a>测试服务</h3><h4 id="1-修改配置"><a href="#1-修改配置" class="headerlink" title="1.修改配置"></a>1.修改配置</h4><p><strong>/etc/fdfs/client.conf</strong> 文件</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#第10行</span><span class="token comment" spellcheck="true"># the base path to store log files</span>base_path<span class="token operator">=</span>/home/fastdfs/client<span class="token comment" spellcheck="true">#保证该路径存在</span><span class="token comment" spellcheck="true">#第14行</span><span class="token comment" spellcheck="true"># tracker_server can ocur more than once, and tracker_server format is</span><span class="token comment" spellcheck="true">#  "host:port", host can be hostname or ip address</span>tracker_server<span class="token operator">=</span>192.168.74.129:22122<span class="token comment" spellcheck="true">#自己的ip！</span></code></pre><h4 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h4><pre class=" language-bash"><code class="language-bash">/usr/bin/fdfs_test /etc/fdfs/client.conf upload anti-steal.jpg</code></pre><h3 id="搭建nginx服务器"><a href="#搭建nginx服务器" class="headerlink" title="搭建nginx服务器"></a>搭建nginx服务器</h3><blockquote><p>nginx提供http服务</p></blockquote><h4 id="1-解压文件"><a href="#1-解压文件" class="headerlink" title="1.解压文件"></a>1.解压文件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxf fastdfs-nginx-module_v1.16.tar.gz<span class="token function">tar</span> -zxf nginx-1.8.0.tar.gz</code></pre><h4 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2. 修改配置"></a>2. 修改配置</h4><p>2、修改/root/fastdfs-nginx-module/src/config文件，把其中的local去掉。共三处。</p><p>nginx安装见前文</p><h4 id="3-移动并修改配置"><a href="#3-移动并修改配置" class="headerlink" title="3. 移动并修改配置"></a>3. 移动并修改配置</h4><p>6、把/root/fastdfs-nginx-module/src/mod_fastdfs.conf文件复制到/etc/fdfs目录下</p><pre class=" language-txt"><code class="language-txt"># 第10行# the base path to store log filesbase_path=/tmp#日志路径</code></pre><pre class=" language-txt"><code class="language-txt"># 第40行# FastDFS tracker_server can ocur more than once, and tracker_server format is#  "host:port", host can be hostname or ip address# valid only when load_fdfs_parameters_from_tracker is truetracker_server=192.168.74.129:22122#自己的IP！！</code></pre><pre class=" language-txt"><code class="language-txt">#第53行# if the url / uri including the group name# set to false when uri like /M00/00/00/xxx# set to true when uri like ${group_name}/M00/00/00/xxx, such as group1/M00/xxx# default value is falseurl_have_group_name = true#路径中是否含有group名字</code></pre><pre class=" language-txt"><code class="language-txt">#第62行# store_path#, based 0, if store_path0 not exists, it's value is base_path# the paths must be exist# must same as storage.confstore_path0=/home/fastdfs/storage#图片存放路径</code></pre><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><pre class=" language-txt"><code class="language-txt">server {        listen       80;        server_name  localhost;        location /group1/M00/{                ngx_fastdfs_module;        }}</code></pre><h4 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h4><p>将libfdfsclient.so拷贝至/usr/lib下<br>cp /usr/lib64/libfdfsclient.so /usr/lib/</p><p>至此服务器已经搭建成功</p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /etc/fdfs//usr/bin/fdfs_test /etc/fdfs/client.conf upload anti-steal.jpg</code></pre><p>上面命令执行完毕会在最下面信息产生一个url,在本机访问此url即可读取到图片(记得关闭虚拟机防火墙)</p><blockquote><p><strong>tips</strong>: centos7下关闭虚拟机命令为 sudo systemctl stop firewalld.service ,大家发现常规的iptables不能识别是因为centos7取消了iptables为firewalld.</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用指令</title>
      <link href="/linux-chang-yong-zhi-ling.html"/>
      <url>/linux-chang-yong-zhi-ling.html</url>
      
        <content type="html"><![CDATA[<h1 id="一-文件和目录"><a href="#一-文件和目录" class="headerlink" title="一. 文件和目录"></a>一. 文件和目录</h1><h2 id="1-cd"><a href="#1-cd" class="headerlink" title="1. cd"></a>1. cd</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /home         进入 <span class="token string">'/ home'</span> 目录<span class="token function">cd</span> <span class="token punctuation">..</span>            返回上一级目录 <span class="token function">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>         返回上两级目录 <span class="token function">cd</span>               进入个人的主目录 <span class="token function">cd</span> ~user1        进入个人的主目录 <span class="token function">cd</span> -             返回上次所在的目录</code></pre><h2 id="2-ls"><a href="#2-ls" class="headerlink" title="2. ls"></a>2. ls</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span>          查看目录中的文件 <span class="token function">ls</span>  -l      显示文件和目录的详细资料 <span class="token function">ls</span> -a       列出全部文件，包含隐藏文件<span class="token function">ls</span> -R       连同子目录的内容一起列出（递归列出），等于该目录下的所有文件都会显示出来  <span class="token function">ls</span> <span class="token punctuation">[</span>0-9<span class="token punctuation">]</span>    显示包含数字的文件名和目录名</code></pre><h2 id="3-cp"><a href="#3-cp" class="headerlink" title="3. cp"></a>3. cp</h2><p>用于复制文件，copy之意，它还可以把多个文件一次性地复制到一个目录下</p><pre class=" language-bash"><code class="language-bash">-a       将文件的特性一起复制-p       连同文件的属性一起复制，而非使用默认方式，与-a相似，常用于备份-i       若目标文件已经存在时，在覆盖时会先询问操作的进行-r       递归持续复制，用于目录的复制行为-u       目标文件与源文件有差异时才会复制</code></pre><h2 id="4-mv"><a href="#4-mv" class="headerlink" title="4. mv"></a>4. mv</h2><p>用于移动文件、目录或更名</p><pre class=" language-bash"><code class="language-bash">-f      force强制的意思，如果目标文件已经存在，不会询问而直接覆盖-i      若目标文件已经存在，就会询问是否覆盖-u      若目标文件已经存在，且比目标文件新，才会更新</code></pre><h2 id="5-rm"><a href="#5-rm" class="headerlink" title="5. rm"></a>5. rm</h2><pre class=" language-bash"><code class="language-bash">-f      就是force的意思，忽略不存在的文件，不会出现警告消息-i      互动模式，在删除前会询问用户是否操作-r      递归删除，最常用于目录删除，它是一个非常危险的参数</code></pre><h1 id="二-查看文件"><a href="#二-查看文件" class="headerlink" title="二. 查看文件"></a>二. 查看文件</h1><h2 id="6-cat命令"><a href="#6-cat命令" class="headerlink" title="6. cat命令"></a>6. cat命令</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> file1               从第一个字节开始正向查看文件的内容 tac file1               从最后一行开始反向查看一个文件的内容 <span class="token function">cat</span> -n file1            标示文件的行数 <span class="token function">more</span> file1              查看一个长文件的内容 <span class="token function">head</span> -n 2 file1         查看一个文件的前两行 <span class="token function">tail</span> -n 2 file1         查看一个文件的最后两行 <span class="token function">tail</span> -n +1000 file1     从1000行开始显示，显示1000行以后的<span class="token function">cat</span> filename <span class="token operator">|</span> <span class="token function">head</span> -n 3000 <span class="token operator">|</span> <span class="token function">tail</span> -n +1000     显示1000行到3000行<span class="token function">cat</span> filename <span class="token operator">|</span> <span class="token function">tail</span> -n +3000 <span class="token operator">|</span> <span class="token function">head</span> -n 1000     从第3000行开始，显示1000<span class="token punctuation">(</span>即显示3000~3999行<span class="token punctuation">)</span></code></pre><h1 id="三-文件搜索"><a href="#三-文件搜索" class="headerlink" title="三. 文件搜索"></a>三. 文件搜索</h1><h2 id="7-find"><a href="#7-find" class="headerlink" title="7. find"></a>7. find</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -name file1      从 <span class="token string">'/'</span> 开始进入根文件系统搜索文件和目录 <span class="token function">find</span> / -user user1      搜索属于用户 <span class="token string">'user1'</span> 的文件和目录 <span class="token function">find</span> /usr/bin -type f -atime +100   搜索在过去100天内未被使用过的执行文件 <span class="token function">find</span> /usr/bin -type f -mtime -10    搜索在10天内被创建或者修改过的文件 <span class="token function">whereis</span> halt            显示一个二进制文件、源码或man的位置 <span class="token function">which</span> halt              显示一个二进制文件或可执行文件的完整路径删除大于50M的文件：<span class="token function">find</span> /var/mail/ -size +50M -exec <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> ＼<span class="token punctuation">;</span></code></pre><h1 id="四-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#四-文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="四. 文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>四. 文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h1><h2 id="8-chmod"><a href="#8-chmod" class="headerlink" title="8. chmod"></a>8. chmod</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">ls</span> -lh      显示权限 <span class="token function">chmod</span> ugo+rwx directory1        设置目录的所有人<span class="token punctuation">(</span>u<span class="token punctuation">)</span>、群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>以及其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>以读（r，4 ）、写<span class="token punctuation">(</span>w，2<span class="token punctuation">)</span>和执行<span class="token punctuation">(</span>x，1<span class="token punctuation">)</span>的权限 <span class="token function">chmod</span> go-rwx directory1         删除群组<span class="token punctuation">(</span>g<span class="token punctuation">)</span>与其他人<span class="token punctuation">(</span>o<span class="token punctuation">)</span>对目录的读写执行权限</code></pre><h2 id="9-chown"><a href="#9-chown" class="headerlink" title="9. chown"></a>9. chown</h2><p>改变文件的所有者</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chown</span> user1 file1               改变一个文件的所有人属性 <span class="token function">chown</span> -R user1 directory1       改变一个目录的所有人属性并同时改变改目录下所有文件的属性 <span class="token function">chown</span> user1:group1 file1        改变一个文件的所有人和群组属性</code></pre><h2 id="10-chgrp"><a href="#10-chgrp" class="headerlink" title="10. chgrp"></a>10. chgrp</h2><p>改变文件所属用户组</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chgrp</span> group1 file1      改变文件的群组</code></pre><h1 id="五-文本处理"><a href="#五-文本处理" class="headerlink" title="五. 文本处理"></a>五. 文本处理</h1><h2 id="11-grep"><a href="#11-grep" class="headerlink" title="11. grep"></a>11. grep</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">grep</span> Aug /var/log/messages      在文件 <span class="token string">'/var/log/messages'</span>中查找关键词<span class="token string">"Aug"</span> <span class="token function">grep</span> ^Aug /var/log/messages     在文件 <span class="token string">'/var/log/messages'</span>中查找以<span class="token string">"Aug"</span>开始的词汇 <span class="token function">grep</span> <span class="token punctuation">[</span>0-9<span class="token punctuation">]</span>  /var/log/messages   选择 <span class="token string">'/var/log/messages'</span> 文件中所有包含数字的行 <span class="token function">grep</span> Aug -R /var/log/*          在目录 <span class="token string">'/var/log'</span> 及随后的目录中搜索字符串<span class="token string">"Aug"</span> <span class="token function">sed</span> <span class="token string">'s/stringa1/stringa2/g'</span> example.txt     将example.txt文件中的 <span class="token string">"string1"</span> 替换成 <span class="token string">"string2"</span> <span class="token function">sed</span> <span class="token string">'/^$/d'</span> example.txt         从example.txt文件中删除所有空白行</code></pre><h2 id="12-paste"><a href="#12-paste" class="headerlink" title="12. paste"></a>12. paste</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">paste</span> file1 file2               合并两个文件或两栏的内容 <span class="token function">paste</span> -d <span class="token string">'+'</span> file1 file2        合并两个文件或两栏的内容，中间用<span class="token string">"+"</span>区分</code></pre><h2 id="13-sort"><a href="#13-sort" class="headerlink" title="13. sort"></a>13. sort</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">sort</span> file1 file2            排序两个文件的内容 <span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span>     取出两个文件的并集<span class="token punctuation">(</span>重复的行只保留一份<span class="token punctuation">)</span> <span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -u  删除交集，留下其他的行 <span class="token function">sort</span> file1 file2 <span class="token operator">|</span> <span class="token function">uniq</span> -d  取出两个文件的交集<span class="token punctuation">(</span>只留下同时存在于两个文件中的文件<span class="token punctuation">)</span></code></pre><h2 id="14-common"><a href="#14-common" class="headerlink" title="14. common"></a>14. common</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">comm</span> -1 file1 file2     比较两个文件的内容只删除 <span class="token string">'file1'</span> 所包含的内容 <span class="token function">comm</span> -2 file1 file2     比较两个文件的内容只删除 <span class="token string">'file2'</span> 所包含的内容 <span class="token function">comm</span> -3 file1 file2     比较两个文件的内容只删除两个文件共有的部分</code></pre><h1 id="六-打包和压缩文件"><a href="#六-打包和压缩文件" class="headerlink" title="六. 打包和压缩文件"></a>六. 打包和压缩文件</h1><h2 id="15-tar"><a href="#15-tar" class="headerlink" title="15. tar"></a>15. tar</h2><p>对文件进行打包，默认情况并不会压缩，如果指定了相应的参数，它还会调用相应的压缩程序（如gzip和bzip等）进行压缩和解压</p><pre class=" language-bash"><code class="language-bash">-c              新建打包文件-t              查看打包文件的内容含有哪些文件名-x              解打包或解压缩的功能，可以搭配-C（大写）指定解压的目录，注意-c,-t,-x不能同时出现在同一条命令中-j              通过bzip2的支持进行压缩/解压缩-z              通过gzip的支持进行压缩/解压缩-v              在压缩/解压缩过程中，将正在处理的文件名显示出来-f filename     filename为要处理的文件-C <span class="token function">dir</span>          指定压缩/解压缩的目录dir压缩：tar -jcv -f filename.tar.bz2 要被处理的文件或目录名称查询：tar -jtv -f filename.tar.bz2解压：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录bunzip2 file1.bz2       解压一个叫做 <span class="token string">'file1.bz2'</span>的文件 <span class="token function">bzip2</span> file1             压缩一个叫做 <span class="token string">'file1'</span> 的文件 gunzip file1.gz         解压一个叫做 <span class="token string">'file1.gz'</span>的文件 <span class="token function">gzip</span> file1              压缩一个叫做 <span class="token string">'file1'</span>的文件 <span class="token function">gzip</span> -9 file1           最大程度压缩 <span class="token function">rar</span> a file1.rar test_file           创建一个叫做 <span class="token string">'file1.rar'</span> 的包 <span class="token function">rar</span> a file1.rar file1 file2 dir1    同时压缩 <span class="token string">'file1'</span>, <span class="token string">'file2'</span> 以及目录 <span class="token string">'dir1'</span> <span class="token function">rar</span> x file1.rar                     解压rar包<span class="token function">zip</span> file1.zip file1                 创建一个zip格式的压缩包 unzip file1.zip                     解压一个zip格式压缩包 <span class="token function">zip</span> -r file1.zip file1 file2 dir1   将几个文件和目录同时压缩成一个zip格式的压缩包</code></pre><h1 id="七-系统和关机（关机、重启和登出）"><a href="#七-系统和关机（关机、重启和登出）" class="headerlink" title="七. 系统和关机（关机、重启和登出）"></a>七. 系统和关机（关机、重启和登出）</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">shutdown</span> -h now     关闭系统<span class="token punctuation">(</span>1<span class="token punctuation">)</span> init 0              关闭系统<span class="token punctuation">(</span>2<span class="token punctuation">)</span> telinit 0           关闭系统<span class="token punctuation">(</span>3<span class="token punctuation">)</span> <span class="token function">shutdown</span> -h hours:minutes <span class="token operator">&amp;</span> 按预定时间关闭系统 <span class="token function">shutdown</span> -c                 取消按预定时间关闭系统 <span class="token function">shutdown</span> -r now             重启<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token function">reboot</span>                      重启<span class="token punctuation">(</span>2<span class="token punctuation">)</span> <span class="token function">logout</span>                      注销 <span class="token function">time</span>                        测算一个命令（即程序）的执行时间</code></pre><h1 id="八-进程相关的命令"><a href="#八-进程相关的命令" class="headerlink" title="八. 进程相关的命令"></a>八. 进程相关的命令</h1><h2 id="16-jps"><a href="#16-jps" class="headerlink" title="16. jps"></a>16. jps</h2><p>显示当前系统的java进程情况，及其id号<br>jps(Java Virtual Machine Process Status Tool)是JDK 1.5提供的一个显示当前所有java进程pid的命令，简单实用，非常适合在linux/unix平台上简单察看当前java进程的一些简单情况。</p><h2 id="17-ps"><a href="#17-ps" class="headerlink" title="17. ps"></a>17. ps</h2><p>用于将某个时间点的进程运行情况选取下来并输出，process之意</p><pre class=" language-bash"><code class="language-bash">-A          所有的进程均显示出来-a          不与terminal有关的所有进程-u          有效用户的相关进程-x          一般与a参数一起使用，可列出较完整的信息-l          较长，较详细地将PID的信息列出<span class="token function">ps</span> aux      <span class="token comment" spellcheck="true"># 查看系统所有的进程数据</span><span class="token function">ps</span> ax       <span class="token comment" spellcheck="true"># 查看不与terminal有关的所有进程</span><span class="token function">ps</span> -lA      <span class="token comment" spellcheck="true"># 查看系统所有的进程数据</span><span class="token function">ps</span> axjf     <span class="token comment" spellcheck="true"># 查看连同一部分进程树状态</span></code></pre><h2 id="18-kill"><a href="#18-kill" class="headerlink" title="18. kill"></a>18. kill</h2><p>用于向某个工作（%jobnumber）或者是某个PID（数字）传送一个信号，它通常与ps和jobs命令一起使用</p><h2 id="19-killall"><a href="#19-killall" class="headerlink" title="19. killall"></a>19. killall</h2><p>向一个命令启动的进程发送一个信号</p><h2 id="20-top"><a href="#20-top" class="headerlink" title="20. top"></a>20. top</h2><p>是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器</p><h2 id="21-如何杀死进程："><a href="#21-如何杀死进程：" class="headerlink" title="21. 如何杀死进程："></a>21. 如何杀死进程：</h2><ul><li>图形化界面的方式</li><li>kill -9 pid  （-9表示强制关闭）</li><li>killall -9 程序的名字</li><li>pkill 程序的名字</li></ul><h2 id="22-查看进程端口号"><a href="#22-查看进程端口号" class="headerlink" title="22. 查看进程端口号"></a>22. 查看进程端口号</h2><p>netstat -tunlp|grep 端口号</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在局域网访问虚拟机</title>
      <link href="/ru-he-zai-ju-yu-wang-fang-wen-xu-ni-ji.html"/>
      <url>/ru-he-zai-ju-yu-wang-fang-wen-xu-ni-ji.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在弄虚拟机，就想着如何在局域网访问虚拟机。搭在局域网，利用虚拟机就可以实现一个服务器，感觉很有意思，就弄了弄，写下来记录一下。</p></blockquote><p>环境</p><blockquote><p>虚拟机VM : Centos7(NAT模式)<br>宿主机 : win10</p></blockquote><h2 id="1-查看虚拟机ip"><a href="#1-查看虚拟机ip" class="headerlink" title="1.查看虚拟机ip"></a>1.查看虚拟机ip</h2><p>为了助于观看，无用的信息我删除了。</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ifconfig</span>ens33: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu 1500        inet 192.168.74.226  netmask 255.255.255.0  broadcast 192.168.74.255        inet6 fe80::72b5:397c:3e0f:8a9f  prefixlen 64  scopeid 0x20<span class="token operator">&lt;</span>link<span class="token operator">></span>        ether 00:0c:29:1d:01:22  txqueuelen 1000  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets 4846  bytes 538314 <span class="token punctuation">(</span>525.6 KiB<span class="token punctuation">)</span>        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 2791  bytes 1819310 <span class="token punctuation">(</span>1.7 MiB<span class="token punctuation">)</span>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</code></pre><p>可以看到ip为<kbd>192.168.74.226</kbd></p><h2 id="2-将虚拟机端口映射到宿主机端口"><a href="#2-将虚拟机端口映射到宿主机端口" class="headerlink" title="2. 将虚拟机端口映射到宿主机端口"></a>2. 将虚拟机端口映射到宿主机端口</h2><p>VM上: </p><ol><li>编辑 -&gt; 虚拟网络编辑器 -&gt; 更改设置(为了进入管理员权限) -&gt; 选中虚拟机(我的名称是 VMnet8 ) -&gt; NAT配置<br><img src="/img/如何在局域网访问虚拟机/nat配置.png" alt="nat配置"></li><li>端口转发：添加 -&gt; 主机端口(1024以上)， 虚拟机IP，虚拟机端口(为了方便访问web项目，我填的是80) -&gt; 确认<br><img src="/img/如何在局域网访问虚拟机/端口配置.png" alt="端口配置"></li></ol><h2 id="3-宿主机配置"><a href="#3-宿主机配置" class="headerlink" title="3. 宿主机配置"></a>3. 宿主机配置</h2><ul><li><ol><li>进入高级安全 Windows Defender防火墙<br><img src="/img/如何在局域网访问虚拟机/宿主机端口配置.png" alt="宿主机端口配置"></li></ol></li><li><ol start="2"><li>规则类型：选择端口，下一步</li></ol></li><li><ol start="3"><li>协议和端口：选择特定端口，依照步骤二 2 中，此处配置为<kbd>1300</kbd>，下一步</li></ol></li><li><ol start="4"><li>操作：选择允许连接，下一步</li></ol></li><li><ol start="5"><li>配置文件： 全选，下一步</li></ol></li><li><ol start="6"><li>名称：名称 – 局域网映射虚拟机(自己随便取拉，方便自己看就行了)，描述–自己写吧</li></ol></li><li><ol start="7"><li>完成</li></ol></li></ul><h2 id="4-访问虚拟机对应端口的项目"><a href="#4-访问虚拟机对应端口的项目" class="headerlink" title="4. 访问虚拟机对应端口的项目"></a>4. 访问虚拟机对应端口的项目</h2><p>路径为：<kbd>宿主机ip:端口</kbd><br>依照上文配置: 宿主机ip:1300，你就可以在局域网访问试试了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟机Centos7上配置nginx</title>
      <link href="/xu-ni-ji-centos7-shang-pei-zhi-nginx.html"/>
      <url>/xu-ni-ji-centos7-shang-pei-zhi-nginx.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-nginx-入门"><a href="#1-nginx-入门" class="headerlink" title="1. nginx 入门"></a>1. nginx 入门</h1><h2 id="1-1-什么是nginx"><a href="#1-1-什么是nginx" class="headerlink" title="1.1 什么是nginx"></a>1.1 什么是nginx</h2><blockquote><p>Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定。</p></blockquote><h2 id="1-2-nginx的应用场景"><a href="#1-2-nginx的应用场景" class="headerlink" title="1.2 nginx的应用场景"></a>1.2 nginx的应用场景</h2><blockquote><ul><li>1 http服务器。Nginx是一个http服务可以独立提供http服务。可以做网页静态服务器。</li><li>2 虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</li><li>3 反向代理，负载均衡。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况</li></ul></blockquote><h1 id="2-在虚拟机Centos7下配置nginx"><a href="#2-在虚拟机Centos7下配置nginx" class="headerlink" title="2. 在虚拟机Centos7下配置nginx"></a>2. 在虚拟机Centos7下配置nginx</h1><blockquote><p>我是用SecureCrt连接虚拟机操作的。</p></blockquote><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h2><p>现在本地(windows)下<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">下载</a>，再传到SecureCrt上，下载后缀为 <strong>.tar.gz</strong></p><h2 id="2-2-配置虚拟机的环境"><a href="#2-2-配置虚拟机的环境" class="headerlink" title="2.2 配置虚拟机的环境"></a>2.2 配置虚拟机的环境</h2><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> gcc-c++yum <span class="token function">install</span> -y pcre pcre-develyum <span class="token function">install</span> -y zlib zlib-develyum <span class="token function">install</span> -y openssl openssl-devel</code></pre><p>依次为 <kbd>gcc环境</kbd>，<kbd>pcre库</kbd>（nginx的http模块使用pcre来解析正则表达式），<kbd>zlib库</kbd>（nginx使用zlib对http包的内容进行gzip），<kbd>openssl库</kbd>（OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及SSL协议，并提供丰富的应用程序供测试或其它目的使用。nginx不仅支持http协议，还支持https（即在ssl协议上传输http）)</p><h2 id="2-3-上传到虚拟机上"><a href="#2-3-上传到虚拟机上" class="headerlink" title="2.3 上传到虚拟机上"></a>2.3 上传到虚拟机上</h2><p>默认上传的文件位置在，你的用户的文件夹下</p><h2 id="2-4-解压文件"><a href="#2-4-解压文件" class="headerlink" title="2.4 解压文件"></a>2.4 解压文件</h2><p>以nginx-1.8.0版本为例</p><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf nginx-1.8.0.tar.gz</code></pre><h2 id="2-5-编译安装"><a href="#2-5-编译安装" class="headerlink" title="2.5 编译安装"></a>2.5 编译安装</h2><p>需在 /var 下创建/temp/nginx,注意看下面的路径，没有文件夹会报错</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> nginx-1.8.0./configure \--prefix<span class="token operator">=</span>/usr/local/nginx \--pid-path<span class="token operator">=</span>/var/run/nginx/nginx.pid \--lock-path<span class="token operator">=</span>/var/lock/nginx.lock \--error-log-path<span class="token operator">=</span>/var/log/nginx/error.log \--http-log-path<span class="token operator">=</span>/var/log/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path<span class="token operator">=</span>/var/temp/nginx/client \--http-proxy-temp-path<span class="token operator">=</span>/var/temp/nginx/proxy \--http-fastcgi-temp-path<span class="token operator">=</span>/var/temp/nginx/fastcgi \--http-uwsgi-temp-path<span class="token operator">=</span>/var/temp/nginx/uwsgi \--http-scgi-temp-path<span class="token operator">=</span>/var/temp/nginx/scgi<span class="token function">make</span> <span class="token function">install</span></code></pre><p>至此nginx已经安装成功了，在/usr/local 下生成了一个nginx文件夹</p><h1 id="3-nginx的启动与停止"><a href="#3-nginx的启动与停止" class="headerlink" title="3. nginx的启动与停止"></a>3. nginx的启动与停止</h1><h2 id="3-1-启动nginx"><a href="#3-1-启动nginx" class="headerlink" title="3.1  启动nginx"></a>3.1  启动nginx</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/nginx/sbin./nginx</code></pre><p>访问你的虚拟机IP，会发现 <b>Welcome to nginx!</b>的界面，如果503就去关闭你的防火墙吧.</p><h2 id="3-2-查看进程"><a href="#3-2-查看进程" class="headerlink" title="3.2  查看进程"></a>3.2  查看进程</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost sbin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps aux|grep nginx</span>root      15484  0.0  0.0  24884   804 ?        Ss   04:43   0:00 nginx: master process ./nginxnobody    15485  0.0  0.1  27424  1568 ?        S    04:43   0:00 nginx: worker processroot      15487  0.0  0.0 112708   980 pts/0    R+   04:44   0:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto nginx</code></pre><p>看到前两个即为正常启动</p><h2 id="3-4-关闭进程"><a href="#3-4-关闭进程" class="headerlink" title="3.4  关闭进程"></a>3.4  关闭进程</h2><pre class=" language-bash"><code class="language-bash">./nginx -s stop./nginx -s quit</code></pre><ol><li><p>快速停止：<br>./nginx -s stop<br>此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。</p></li><li><p>完整停止(建议使用)：<br>./nginx -s quit<br>此方式停止步骤是待nginx进程处理任务完毕进行停止。</p></li></ol><h2 id="3-5-重启nginx"><a href="#3-5-重启nginx" class="headerlink" title="3.5  重启nginx"></a>3.5  重启nginx</h2><pre class=" language-bash"><code class="language-bash">./nginx -s reload</code></pre><h1 id="4-nginx的配置"><a href="#4-nginx的配置" class="headerlink" title="4.  nginx的配置"></a>4.  nginx的配置</h1><h2 id="4-1-查看nginx配置"><a href="#4-1-查看nginx配置" class="headerlink" title="4.1 查看nginx配置"></a>4.1 查看nginx配置</h2><p>查看nginx的配置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> -n /usr/local/nginx/conf/nginx.conf</code></pre><h2 id="4-2-文件结构"><a href="#4-2-文件结构" class="headerlink" title="4.2 文件结构"></a>4.2 文件结构</h2><p>从第一个虚拟主机的例子可以看出nginx的配置文件结构如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>events <span class="token punctuation">{</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token punctuation">}</span>http<span class="token punctuation">{</span>   <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.   server<span class="token punctuation">{</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.    <span class="token punctuation">}</span>   server<span class="token punctuation">{</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>每个server就是一个虚拟主机.</p><h2 id="4-3-配置"><a href="#4-3-配置" class="headerlink" title="4.3 配置"></a>4.3 配置</h2><p><kbd>/usr/local/nginx/conf/nginx.conf</kbd>下</p><blockquote><p>虚拟主机Ip以192.168.101.3为例<br><code>`</code>txt</p></blockquote><p>#配置虚拟主机aaa.test.com<br>server {</p><pre><code>    #监听的ip和端口，配置本机ip和端口    listen 192.168.101.3:80;            #虚拟主机名称是aaa.test.com，请求域名aaa.test.com的url将由此server配置解析    server_name aaa.test.com;         #所有的请求都以/开始，所有的请求都可以匹配此location    location / {    #使用root指令指定虚拟主机目录即网页存放目录    #比如访问http://ip/test.html将找到/usr/local/aaa_html/test.html    #比如访问http://ip/item/test.html将找到/usr/local/aaa_html/item/test.html            root /usr/local/aaa_html;                #指定欢迎页面，按从左到右顺序查找            index index.html index.htm;        }}</code></pre><p>#配置虚拟主机bbb.test.com<br>    server {<br>        listen 192.168.101.3:80;<br>        server_name bbb.test.com;<br>        location / {<br>                root /usr/local/bbb_html;<br>                index index.html index.htm;<br>        }<br>    }<br><code>`</code><br>修改以后重启nginx，访问 aaa.test.com, bbb.test.com试试。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初窥java反射</title>
      <link href="/chu-kui-java-fan-she.html"/>
      <url>/chu-kui-java-fan-she.html</url>
      
        <content type="html"><![CDATA[<p><strong>工具：</strong></p><blockquote><p>jdk: 1.8.0_181<br>IDE:IntelliJ IDEA Community Edition 2019.1.2 x64</p></blockquote><h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><ol><li>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过加载，连接，初始化三步来实现对这个类进行初始化。</li><li>加载<ul><li>2.1  就是指将class文件读入内存，并为之创建一个Class对象。</li><li>2.2  任何类被使用时系统都会建立一个Class对象。</li></ul></li><li>连接<ul><li>3.1  验证 是否有正确的内部结构，并和其他类协调一致</li><li>3.2  准备 负责为静态成员分配内存，并设置默认初始化值</li><li>3.3  解析  将类的二进制数据中的符号引用替换为直接引用</li></ul></li><li>初始化</li></ol><h1 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h1><ul><li>创建类的实例</li><li>访问类的静态变量，或者为静态变量赋值</li><li>调用类的静态方法</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><blockquote><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p></blockquote><p>通俗一点说就是：<strong>就是通过class文件对象，去使用该文件中的成员变量，构造方法，成员方法。</strong>所以要想用反射，就要先获取他的class文件对象，其实也就是获取Class类的对象。</p><p>对于Class类对象：</p><ul><li>成员变量：Field</li><li>构造器：Constructor</li><li>成员方法：Method</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//创建一个Persoon类</span><span class="token keyword">package</span> reflect<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String address<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        age <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"show..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method"</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"name: "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" age: "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">" address: "</span> <span class="token operator">+</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>`</code></pre><h2 id="获得class文件对象的三种方法"><a href="#获得class文件对象的三种方法" class="headerlink" title="获得class文件对象的三种方法"></a>获得class文件对象的三种方法</h2><p>以上面的Person类为例</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式1</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c2</span> <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p <span class="token operator">==</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式2</span>        Class <span class="token class-name">c3</span> <span class="token operator">=</span> Person<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// int.class;</span>        <span class="token comment" spellcheck="true">// String.class;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> c3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 方式3</span>        <span class="token comment" spellcheck="true">// ClassNotFoundException</span>        Class <span class="token class-name">c4</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflect.entity.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全限定名称路径</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> c4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        false        true        true        true        字节码文件唯一        */</span></code></pre><h2 id="获取class文件的构造器并使用"><a href="#获取class文件的构造器并使用" class="headerlink" title="获取class文件的构造器并使用"></a>获取class文件的构造器并使用</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*获取构造方法        getConstructors        getDeclaredConstructors创建对象        newInstance()        con.newInstance();*/</span><span class="token comment" spellcheck="true">//获取字节码文件对象</span>        Class <span class="token class-name">s</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflect.entity.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取公有构造方法对象</span>        Constructor cons <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cons<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用该公有得构造方法</span>        Object o1 <span class="token operator">=</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"nick"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">"road"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取私有构造方法对象</span>        Constructor con <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//暴力访问  IllegalAccessException 取消访问检查</span>        con<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="获取class文件的变量并使用"><a href="#获取class文件的变量并使用" class="headerlink" title="获取class文件的变量并使用"></a>获取class文件的变量并使用</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*获取所有成员        getFields,getDeclaredFields获取单个成员        getField,getDeclaredField修改成员的值        set(Object obj,Object value)   将指定对象变量上此 Field 对象表示的字段设置为指定的新值。*/</span> Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflect.entity.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//只获得public修饰的变量</span><span class="token comment" spellcheck="true">//        Field[] fields = c.getFields();</span>        <span class="token comment" spellcheck="true">//获取所有的参数</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获得单个的成员变量</span>        <span class="token comment" spellcheck="true">//获得address并对其赋值(public)</span>        Constructor con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object o1 <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field addressField <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        addressField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> <span class="token string">"湖北"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得name并对其赋值(private)</span>        Object o2 <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field nameField <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//取消权限访问检查</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>o2<span class="token punctuation">,</span> <span class="token string">"rose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="获取class文件成员方法并使用"><a href="#获取class文件成员方法并使用" class="headerlink" title="获取class文件成员方法并使用"></a>获取class文件成员方法并使用</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*获取所有方法        getMethods        getDeclaredMethods获取单个方法        getMethod        getDeclaredMethod暴力访问        method.setAccessible(true);*/</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"reflect.entity.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取所有方法，包括父类的方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取自己的方法</span>        Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取单个方法</span>        Constructor con <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object obj <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method m1 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//obj.m1(); //wrong</span>        <span class="token comment" spellcheck="true">//调用obj对象的方法</span>        m1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取带参的方法</span>        Object o1 <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method m2 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> <span class="token string">"xixixi..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取带返回值的方法</span>        Object o2 <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Method m3 <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//invoke() 返回值的类型是object</span>        Object o3 <span class="token operator">=</span> m3<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> o3<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>利用反射向ArrayList<integer>数组中添加字符串获取别的数据类型：</integer></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*    通过反射越过类型检查     */</span>        ArrayList<span class="token operator">&lt;</span>Integer<span class="token operator">></span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">c</span> <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得ArrayList的class文件对象</span>        Method m <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="基于反射实现的动态代理"><a href="#基于反射实现的动态代理" class="headerlink" title="基于反射实现的动态代理"></a>基于反射实现的动态代理</h2><ol><li>在Java中java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，通过使用这个类和接口就可以生成动态代理对象。JDK提供的代理只能针对接口做代理。我们有更强大的代理cglib</li><li>Proxy类中的方法创建动态代理类对象<ul><li>2.1  public static Object newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</li><li>2.2  最终会调用InvocationHandler的方法</li></ul></li><li>InvocationHandler</li></ol><ul><li>Object invoke(Object proxy,Method method,Object[] args)</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> proxy<span class="token punctuation">.</span>DAO<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> proxy<span class="token punctuation">.</span>DAOImpl<span class="token punctuation">;</span><span class="token keyword">import</span> proxy<span class="token punctuation">.</span>DAO<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDAOImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"login..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"register..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//目标对象</span>    <span class="token keyword">public</span> <span class="token function">MyInvocationHandler</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"权限检验..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"日志记录..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的是代理对象</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> proxy<span class="token punctuation">;</span><span class="token keyword">import</span> proxy<span class="token punctuation">.</span>DAO<span class="token punctuation">.</span>UserDao<span class="token punctuation">;</span><span class="token keyword">import</span> proxy<span class="token punctuation">.</span>DAOImpl<span class="token punctuation">.</span>UserDAOImpl<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDAOImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userDao<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//对userDao对象做一个代理对象</span>        MyInvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyInvocationHandler</span><span class="token punctuation">(</span>userDao<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Proxy有一个方法可以创建动态代理对象</span>        UserDao proxy <span class="token operator">=</span> <span class="token punctuation">(</span>UserDao<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>userDao<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDao<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-log"><code class="language-log">login...register...---------权限检验...login...日志记录...权限检验...register...日志记录...</code></pre><p>只需要用一次动态代理就可以实现在方法中添加”前方法”与”后方法”,极大的精简了代码，这在后面的框架中使用很多。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git&amp;github的使用</title>
      <link href="/git-github.html"/>
      <url>/git-github.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>git真的是一个很方便的一个工具，非常值得学习，而且搭配github使用或者是多人项目的开发，真的是很牛x。</p></blockquote><h1 id="分布式与集中式"><a href="#分布式与集中式" class="headerlink" title="分布式与集中式"></a>分布式与集中式</h1><p>学习之前了解一下分布式与集中式<br>假如我们要办一件事,一个人包揽就是集中式，一件事分成几个部分分成几个人做就是分布式，二者最取得的效果是一样的。<br>比如一个javaweb的项目,我们把它简单的分成web页面服务:数据库服务，service服务。</p><blockquote><p>集中式: 我们将它部署在服务器上，如果服务器出了问题，这个网站就崩了。</p></blockquote><blockquote><p>分布式: 上面的三个，我们用独立服务器放，同一类我们还可以用多个服务器组成，即使一个崩了，还有其他的服务器顶着。</p></blockquote><p>集中式版本控制: 版本库存放在中央服务器，每次工作都要从中央服务器取出最新的版本，修改以后再提交上去，一旦服务器崩了，或者没网了，工作无法执行。<br>分布式版本控制: 没有中央服务器，每个人的电脑上都有一个完整的版本库，每次工作完以后只要将每次的修改提交给对方就行了。</p><h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><h2 id="git使用前的最小配置"><a href="#git使用前的最小配置" class="headerlink" title="git使用前的最小配置"></a>git使用前的最小配置</h2><blockquote><p>git config –global user.name ‘your_name’<br>git config –global user.email <a href="mailto:'your_email@domain.com" target="_blank" rel="noopener">'your_email@domain.com</a>‘<br>缺省等同于local</p><ul><li>git config –local        local只对某个仓库有效</li><li>git config –global       global对当前用户的所有仓库有效</li><li>git config –system       system对系统所有登录的用户有效</li></ul></blockquote><blockquote><p>在当前仓库中，如果设置了local的话，local优先级要高，system指令用不上</p></blockquote><p>查看一些配置信息：</p><ul><li>git config –list –local     只在某一个仓库有效</li><li>git config –list –global    所有仓库有效</li><li>git config –list –system</li></ul><h2 id="了解工作区，暂存区，历史版本库"><a href="#了解工作区，暂存区，历史版本库" class="headerlink" title="了解工作区，暂存区，历史版本库"></a>了解工作区，暂存区，历史版本库</h2><p><img src="/img/git-github/三个分区.png" alt="分区"></p><h3 id="git是如何保存数据的"><a href="#git是如何保存数据的" class="headerlink" title="git是如何保存数据的"></a>git是如何保存数据的</h3><p>git存储文件的方式不是存储文件的变化或者差异，他存储的是一系列不同时刻文件的 <strong>快照</strong> .例如，每次你执行 <kbd>git add</kbd> 或者 <kbd>git commmit</kbd> 操作，就会将文件压缩成一个二进制文件，这就是一个Git对象，存在于 ==.git/objects== 目录下。文件的名字是用SHA1算法计算的一个hash值(长度40的字符串)， ==.git/objects== 下成一个子目录，前两个字符是子目录名，后38位是文件名。</p><h2 id="git文件"><a href="#git文件" class="headerlink" title=".git文件"></a>.git文件</h2><p>两个比较重要的文件:</p><blockquote><p>refs/ </p><blockquote><p>heads    -分支       (例如：前端分支，后端分支，两者互不影响)<br>tags       -里程碑     (标签)</p></blockquote><p>HEAD      - 查看当前仓库在哪个分支上<br>conig     - 仓库信息<br>objects   - 存储每次操作的二进制文件</p></blockquote><h2 id="git中文件的几种状态"><a href="#git中文件的几种状态" class="headerlink" title="git中文件的几种状态"></a>git中文件的几种状态</h2><blockquote><p>Untracked:   未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<kbd>git add</kbd> 状态变为Staged.</p></blockquote><blockquote><p>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified.</p></blockquote><blockquote><p>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用<kbd>git checkout</kbd> 则丢弃修改过,返回到unmodify状态, 这个<kbd>git checkout</kbd>即从库中取出文件, 覆盖当前修改</p></blockquote><blockquote><p>Staged: 暂存状态. 执行<kbd>git commit</kbd>则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行<kbd>git reset HEAD filename </kbd> 取消暂存,文件状态为Modified</p></blockquote><h2 id="git的常用操作"><a href="#git的常用操作" class="headerlink" title="git的常用操作"></a>git的常用操作</h2><h3 id="1-查看工作区状态"><a href="#1-查看工作区状态" class="headerlink" title="1. 查看工作区状态"></a>1. 查看工作区状态</h3><pre class=" language-bash"><code class="language-bash"> <span class="token function">git</span> status</code></pre><h3 id="2-工作区提交到暂存区"><a href="#2-工作区提交到暂存区" class="headerlink" title="2. 工作区提交到暂存区"></a>2. 工作区提交到暂存区</h3><p>对暂存区文件的修改：添加，删除，更新</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token operator">&lt;</span>file-name<span class="token operator">></span><span class="token function">git</span> add <span class="token keyword">.</span>                   //提交所有文件<span class="token function">git</span> add --ignore-removal    //不提交删除文件<span class="token function">git</span> add -u                  //不提交新文件</code></pre><h3 id="3-暂存区提交到版本库"><a href="#3-暂存区提交到版本库" class="headerlink" title="3. 暂存区提交到版本库"></a>3. 暂存区提交到版本库</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'message'</span></code></pre><h3 id="4-查看历史版本"><a href="#4-查看历史版本" class="headerlink" title="4. 查看历史版本"></a>4. 查看历史版本</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log                             //查看所有版本历史<span class="token function">git</span> log <span class="token operator">&lt;</span>branch-name<span class="token operator">></span>               //查看当前分支<span class="token function">git</span> log --graph                     //以图的形式查看版本历史<span class="token function">git</span> log --oneline                   //省略一些信息，一次commit只展示一行</code></pre><h3 id="5-比较文件差异"><a href="#5-比较文件差异" class="headerlink" title="5. 比较文件差异"></a>5. 比较文件差异</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>--<span class="token operator">&lt;</span>file-nameA<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>file-nameB<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span>                //比较工作区与暂存区差异，加文件名就只比较文件<span class="token punctuation">(</span>可以比多个<span class="token punctuation">)</span>的差异<span class="token function">git</span> <span class="token function">diff</span> -cached <span class="token punctuation">[</span>--<span class="token operator">&lt;</span>file-nameA<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>file-nameB<span class="token operator">></span><span class="token punctuation">]</span><span class="token punctuation">]</span>        //比较暂存区与head指针所含文件的差异</code></pre><h3 id="6-删除工作区和暂存区文件"><a href="#6-删除工作区和暂存区文件" class="headerlink" title="6. 删除工作区和暂存区文件"></a>6. 删除工作区和暂存区文件</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>file-name<span class="token operator">></span></code></pre><h3 id="7-工作区同步与暂存区一样"><a href="#7-工作区同步与暂存区一样" class="headerlink" title="7. 工作区同步与暂存区一样"></a>7. 工作区同步与暂存区一样</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -- <span class="token operator">&lt;</span>file-nameA<span class="token operator">></span> <span class="token punctuation">[</span>file-nameB<span class="token punctuation">]</span><span class="token function">git</span> checkout -- *</code></pre><h3 id="8-暂存区同步与历史版本库一样"><a href="#8-暂存区同步与历史版本库一样" class="headerlink" title="8. 暂存区同步与历史版本库一样"></a>8. 暂存区同步与历史版本库一样</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token operator">&lt;</span>branch-name<span class="token operator">></span>                     //同步到某一个分支<span class="token function">git</span> reset HEAD -- <span class="token operator">&lt;</span>filenameA<span class="token operator">></span> <span class="token punctuation">[</span>filenameB<span class="token punctuation">]</span>   //同步到某一个分支的一个或者多个文件</code></pre><h3 id="9-版本回溯"><a href="#9-版本回溯" class="headerlink" title="9. 版本回溯"></a>9. 版本回溯</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --soft <span class="token operator">&lt;</span>commit-id<span class="token operator">></span><span class="token function">git</span> reset --hard <span class="token operator">&lt;</span>commit-id<span class="token operator">></span></code></pre><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><table style="text-align:center">   <tbody><tr>      <td colspan="4"> git reset 影响范围</td>   </tr>   <tr>      <td>指令</td>      <td>HEAD</td>      <td>暂存区</td>      <td>工作区</td>   </tr>   <tr>      <td>–soft</td>      <td>是</td>      <td>否</td>      <td>否</td>   </tr>   <tr>      <td>–mixed</td>      <td>是</td>      <td>是</td>      <td>否</td>   </tr>   <tr>      <td>–hard</td>      <td>是</td>      <td>是</td>      <td>是</td>   </tr></tbody></table><h3 id="10-合并分支"><a href="#10-合并分支" class="headerlink" title="10.  合并分支"></a>10.  合并分支</h3><p>– 基于 <strong>merge</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> merge <span class="token operator">&lt;</span>merge-nameA<span class="token operator">></span> </code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> merge --abort   //如果不想合并，此命令会返回合并之前的状态</code></pre><blockquote><p><strong>fast-forward(快进)与non-fast-forward</strong><br>分支合并，其中一个分支，是另外一个分支的父分支，叫做fast-forward，否则就是non-fast-forward</p></blockquote><blockquote><p><a href="https://blog.csdn.net/u012937029/article/details/77161584" target="_blank" rel="noopener">merge操作</a>：利用三路合并算法，merge结果与时间先后无关，就是两个人分支会找到一个基准Base(历史版本中的某一次commit,简单情况下就是分支分叉的位置)，如果两个文件相对于Base都不一样，就会产生冲突，需要手动解决。查看两个分支的Base命令： <strong>git merge-base \&lt;merge-nameA&gt; \&lt;merge-name-B&gt;</strong>。<a href="https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E9%AB%98%E7%BA%A7%E5%90%88%E5%B9%B6#r_merge_log" target="_blank" rel="noopener">merge之前的文件在merge过程中可以导出查看</a>。</p></blockquote><p>– 基于 <strong>rebase</strong>的变基操作</p><blockquote><p>将一个分支的修改移到另外一个分支上，好像”重新播放”一样.</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> rebase <span class="token operator">&lt;</span>branchA<span class="token operator">></span>        //相当于在B分支上，把B整合到A上，A，B最近的共同父分支<span class="token punctuation">(</span>就是分叉的位置<span class="token punctuation">)</span>往后的B分支都不见了，会在A分支后生成一段新的提交。这样，提交历史就是一条干净的直线了。//如果发生冲突<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> rebase --continue</code></pre><p>最好是在提交到远程仓库之前之前，将自己的版本库进行一次变基操作，再向主项目提交。<br><strong>变基操作的准则：不要对在你的仓库外有副本的分支执行变基。</strong></p><h3 id="11-修改工作区和暂存区文件名"><a href="#11-修改工作区和暂存区文件名" class="headerlink" title="11. 修改工作区和暂存区文件名"></a>11. 修改工作区和暂存区文件名</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">mv</span> <span class="token operator">&lt;</span>old-name<span class="token operator">></span> <span class="token operator">&lt;</span>new-name<span class="token operator">></span></code></pre><h3 id="12-关于分支的操作"><a href="#12-关于分支的操作" class="headerlink" title="12. 关于分支的操作"></a>12. 关于分支的操作</h3><p>– 创建分支</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token operator">&lt;</span>new-branch-name<span class="token operator">></span></code></pre><p>– 查看分支</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token punctuation">[</span>-v<span class="token punctuation">]</span></code></pre><p>– 切换分支</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch-name<span class="token operator">></span></code></pre><p>– 删除分支</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -d <span class="token operator">&lt;</span>branch-name<span class="token operator">></span></code></pre><h3 id="13-将多个commit整理成一个commit"><a href="#13-将多个commit整理成一个commit" class="headerlink" title="13. 将多个commit整理成一个commit"></a>13. 将多个commit整理成一个commit</h3><p>– 不连续的commit</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> rebase -i <span class="token operator">&lt;</span>要整合的最早的一个commit<span class="token operator">></span></code></pre><p>演示：<br>先看一段版本历史:<br><img src="/img/git-github/rebase版本历史.png" alt="版本历史"><br>容易看出版本号为： d09341c ，e3a6b32 ，603e2b3 都是对readme.md的操作，我们想整理成一次commit。<br>先找到要整合的最早的commit的版本号 为 603e2b3<br>执行：<kbd>git rebase -i 603e2b3<kbd><br>进入界面:<br><img src="/img/git-github/rebase版本编辑.png" alt="版本历史"><br>修改后：<br>注意看p,s均为简写，下方有注释<br><img src="/img/git-github/修改后的rebase编辑.png" alt="版本历史"></kbd></kbd></p><p>退出后，执行 <kbd>git rebase –continue<kbd></kbd></kbd></p><p>进入界面：<br><img src="/img/git-github/rebase编辑注释前.png" alt="版本历史"><br>添加注释：<br><img src="/img/git-github/rebase编辑添加注释后.png" alt="版本历史"></p><p>– 连续的commit</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> rebase -i <span class="token operator">&lt;</span>整合的最早的一个commit<span class="token operator">></span></code></pre><p>类似上方，更简单。</p><h3 id="14-消除最近的几个commit"><a href="#14-消除最近的几个commit" class="headerlink" title="14. 消除最近的几个commit"></a>14. 消除最近的几个commit</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> reset --hard <span class="token operator">&lt;</span>commit-number<span class="token operator">></span>        //工作区和暂存区都会恢复成指定的commit版本号的内容<span class="token punctuation">(</span>慎用<span class="token punctuation">)</span></code></pre><h3 id="15-开发中如果紧急加塞怎么处理"><a href="#15-开发中如果紧急加塞怎么处理" class="headerlink" title="15. 开发中如果紧急加塞怎么处理"></a>15. 开发中如果紧急加塞怎么处理</h3><p>git stash会将此时工作区和暂存区的内容压入Git的栈中，工作区就是干净的了，此时工作区的内容会和上次的commit内容一样。来避免一次脏提交。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> stash:                      //备份当前的工作区和暂存区的已经被track的文件，保存到Git栈中。从最近的一次提交中读取相关内容，让工作区保证和上次提交<span class="token function">git</span> stash save <span class="token string">"message"</span>        //同上并添加备注信息<span class="token function">git</span> stash list:                 //显示git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。<span class="token function">git</span> stash pop stash@<span class="token punctuation">{</span>0<span class="token punctuation">}</span>         //从git栈中读取并恢复工作区，然后删除对应的记录，默认恢复最新的（stash@<span class="token punctuation">{</span>0<span class="token punctuation">}</span>为最新）<span class="token function">git</span> stash apply stash@<span class="token punctuation">{</span>0<span class="token punctuation">}</span>       //同git stash pop，但不会删除对应的记录<span class="token function">git</span> stash <span class="token function">clear</span>                 //清空git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</code></pre><h1 id="多人协作以及GitHub的使用"><a href="#多人协作以及GitHub的使用" class="headerlink" title="多人协作以及GitHub的使用"></a>多人协作以及GitHub的使用</h1><h2 id="git备份"><a href="#git备份" class="headerlink" title="git备份"></a>git备份</h2><p>哑协议与智能协议<br>直观区别：哑协议传输进度不可见；智能协议传输可见<br>传输速度：智能协议比哑协议传输速度快</p><table><thead><tr><th>常用协议</th><th>语法格式</th><th>说明</th></tr></thead><tbody><tr><td>本地协议（1）</td><td>/d/Desktop/gitcommit/commit2/.git</td><td>哑协议</td></tr><tr><td>本地协议（2）</td><td>file:///d/Desktop/gitcommit/commit2/.git</td><td>智能协议</td></tr><tr><td>http/https协议</td><td><a href="https://github.com/name/learngit.git" target="_blank" rel="noopener">https://github.com/name/learngit.git</a></td><td>平时接触到的都是智能协议</td></tr><tr><td>ssh协议</td><td><a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:name/learngit.git</td><td>工作中最常用的智能协议</td></tr></tbody></table><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><h3 id="git-clone的使用"><a href="#git-clone的使用" class="headerlink" title="git clone的使用"></a>git clone的使用</h3><ul><li>git clone &lt;版本库的网址&gt; [file-name]<br>如果附带[file-name]，则会生成一个目录名字为[file-name]，默认则为版本库的名字。(注意网址后面是附带.git的)</li></ul><h3 id="git-remote的使用"><a href="#git-remote的使用" class="headerlink" title="git remote的使用"></a>git remote的使用</h3><ul><li>git remote [-v]<br>查看远程主机 [与网址]</li><li>git remote add &lt;主机名&gt; &lt;网址&gt;<br>添加主机</li><li>git remote rename &lt;原主机名&gt; &lt;新主机名&gt;<br>修改主机名字</li><li>git remote rm &lt;主机名&gt;<br>删除主机</li><li>git remote show &lt;主机名&gt;<br>查看主机信息</li></ul><h3 id="git-fetch的使用"><a href="#git-fetch的使用" class="headerlink" title="git fetch的使用"></a>git fetch的使用</h3><ul><li>git fetch &lt;远程主机名&gt; [分支名]<br>取回远程主机所有分支的更新(若附带括号则取指定分支名的更新)</li></ul><h3 id="git-push的使用"><a href="#git-push的使用" class="headerlink" title="git push的使用"></a>git push的使用</h3><p>git push &lt;远程主机名&gt; [远程分支名]:[本地分支名]</p><h3 id="git-pull的使用"><a href="#git-pull的使用" class="headerlink" title="git pull的使用"></a>git pull的使用</h3><ul><li>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;<br>取回远程主机的指定分支，并与指定本地分支合并(一个git pull操作等于先git fetch再git merge)</li></ul><blockquote><p>在git clone的过程中，Git会在本地分支与远程分支之间建立一种追踪关系(tracking)。例如，git clone过程中，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p></blockquote><p>Git也允许手动建立追踪关系</p><blockquote><p>git branch –set-upstream &lt;本地分支名&gt; &lt;远程仓库名&gt;/&lt;远程分支名&gt;</p></blockquote><p>如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p><blockquote><p>git pull &lt;远程仓库名&gt;</p></blockquote><h3 id="第一次提交到非空GitHub仓库"><a href="#第一次提交到非空GitHub仓库" class="headerlink" title="第一次提交到非空GitHub仓库"></a>第一次提交到非空GitHub仓库</h3><p>例如：github初始化时，带有readme和<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="noopener">开源协议</a><br>记得git pull一下</p><h3 id="不同人的人修改了不同的文件"><a href="#不同人的人修改了不同的文件" class="headerlink" title="不同人的人修改了不同的文件"></a>不同人的人修改了不同的文件</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> push github chaseTo github.com:shanqianyouyu/Learning.git <span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        chase -<span class="token operator">></span> chase <span class="token punctuation">(</span>non-fast-forward<span class="token punctuation">)</span>error: failed to push some refs to <span class="token string">'git@github.com:shanqianyouyu/Learning.git'</span>hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes <span class="token punctuation">(</span>e.g.hint: <span class="token string">'git pull ...'</span><span class="token punctuation">)</span> before pushing again.hint: See the <span class="token string">'Note about fast-forwards'</span> <span class="token keyword">in</span> <span class="token string">'git push --help'</span> <span class="token keyword">for</span> details.</code></pre><p>先 merge一下再push</p><h3 id="不同的人修改了相同文件的不同位置"><a href="#不同的人修改了相同文件的不同位置" class="headerlink" title="不同的人修改了相同文件的不同位置"></a>不同的人修改了相同文件的不同位置</h3><p>同上，git会自己整合</p><h3 id="不同的人修改了相同文件的相同位置"><a href="#不同的人修改了相同文件的相同位置" class="headerlink" title="不同的人修改了相同文件的相同位置"></a>不同的人修改了相同文件的相同位置</h3><p>同上操作，不过此时，会提示冲突，git会自己整合，但是需要自己解决冲突</p><h3 id="不同的人同时变更了文件名和文件内容"><a href="#不同的人同时变更了文件名和文件内容" class="headerlink" title="不同的人同时变更了文件名和文件内容"></a>不同的人同时变更了文件名和文件内容</h3><p>例如：</p><ol><li>(先)A修改 <strong>index.html</strong> 为 <strong>index.htm</strong> 并且 push到远程仓库</li><li>(后)B修改 <strong>index.html</strong> (B不知道文件名已经被修改了),并且修改了文件的内容，push到远端，发现错误，git pull(等同于上面的 git fetch 再 git merge) 一下，发现git自动识别出来，就是git会将B仓库下的   <strong>index.html</strong> 修改成 <strong>index.htm</strong> ，并且内容被修改，再push到远程仓库即可</li></ol><h3 id="不同的人同时修改了文件名"><a href="#不同的人同时修改了文件名" class="headerlink" title="不同的人同时修改了文件名"></a>不同的人同时修改了文件名</h3><ol><li>(先)A修改了 <strong>index.html</strong> 为 <strong>index1.html</strong> ,并且push到远端</li><li>(后)B修改 <strong>index.html</strong> 为 <strong>index2.html</strong> ，push到远端报错， <strong>git pull</strong> 到本地，发现发生冲突，这时候需要手动解决冲突， <strong>git status</strong> 会发现，工作区有两个文件 <strong>index1.html</strong> <strong>index2.html</strong> ， <strong>git status</strong> 发现暂存区提示 <pre class=" language-bash"><code class="language-bash">     both deleted:    index.html     added by them:   index1.html     added by us:     index2.html</code></pre>这时候你需要和你的同伴讨论最后的名字是哪一个，然后手动删除不需要的两个文件，提交另外一个即可，再 <strong>git push</strong> 到远程仓库。</li></ol><h3 id="FETCH-HEAD"><a href="#FETCH-HEAD" class="headerlink" title="FETCH_HEAD"></a>FETCH_HEAD</h3><p>FETCH_HEAD是一个短期引用，以跟踪刚刚从远程存储库获取的内容。 git pull首先调用git fetch，在正常情况下从远程获取一个分支; FETCH_HEAD指向这个分支的提示(它存储提交的SHA1，就像分支一样)。 git pull然后调用git merge，将FETCH_HEAD合并到当前分支。</p><h2 id="团队协作中禁止的操作"><a href="#团队协作中禁止的操作" class="headerlink" title="团队协作中禁止的操作"></a><em>团队协作中禁止的操作</em></h2><ul><li>git push -f &lt;commit版本号&gt;</li><li>禁止向集成分支执行变更历史操作(变基操作)</li></ul><h2 id="如何在Github上找到想要的开源项目呢"><a href="#如何在Github上找到想要的开源项目呢" class="headerlink" title="如何在Github上找到想要的开源项目呢"></a>如何在Github上找到想要的开源项目呢</h2><p>进入<a href="https://github.com/search/advanced" target="_blank" rel="noopener">链接</a>： <a href="https://github.com/search/advanced" target="_blank" rel="noopener">https://github.com/search/advanced</a><br>或者在搜索栏空搜，<img src="/img/git-github/git的搜索功能.png" alt="git的搜索功能.png"><br>github的help中有教怎么用，或者看看这个<a href="https://zhuanlan.zhihu.com/p/55294261" target="_blank" rel="noopener">链接</a>吧.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> git&amp;github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-----缓存</title>
      <link href="/mybatis-base4.html"/>
      <url>/mybatis-base4.html</url>
      
        <content type="html"><![CDATA[<h2 id="缓存-Cache"><a href="#缓存-Cache" class="headerlink" title="缓存(Cache)"></a>缓存(Cache)</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><blockquote><p>可以使应用更快的获取数据，避免和数据库做频繁的交互操作，尤其是查询操作比较频繁的时候，当缓存命中率比较高的时候，缓存的优势就很明显。</p></blockquote><p>原理：利用Map，好比是在SqlSession中存在一个map,用来缓存查询出来的对象</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>使用缓存的流程：<br>1.查询的时候先从缓存中去查询数据<br>    A:找到，就离开返回<br>    B:找不到，进入第二步<br>2.去查询数据库<br>    A:把查询的数据放入缓存中，供下次使用<br>    B:返回数据库</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>Mybatis缓存：<br>    1.一级缓存，也称之为本地缓存，默认开启，不能关闭(性能提升差)<br>    2.二级缓存，也称之为查询缓存，需要手动开启和配置，也可以使用第三方的缓存技术，如EhCache，Redis等。</p><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><p>我们来看一个简单的查询操作:<br><em>Mapper.xml</em></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper.TeacherMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,name from teacher where id = #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p><em>Teacher.java</em></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>测试语句:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SqlSession session <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TeacherMapper teacherMapper <span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>TeacherMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacherMapper<span class="token punctuation">.</span><span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacherMapper<span class="token punctuation">.</span><span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacherMapper<span class="token punctuation">.</span><span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacherMapper <span class="token operator">=</span>session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>TeacherMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacherMapper<span class="token punctuation">.</span><span class="token function">getTeacher</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>日志：</p><pre class=" language-txt"><code class="language-txt">DEBUG [main] - ==>  Preparing: select id,name from teacher where id = ? DEBUG [main] - ==> Parameters: 1(Integer)TRACE [main] - <==    Columns: id, nameTRACE [main] - <==        Row: 1, 陈老师DEBUG [main] - <==      Total: 1------DEBUG [main] - ==>  Preparing: select id,name from teacher where id = ? DEBUG [main] - ==> Parameters: 2(Integer)TRACE [main] - <==    Columns: id, nameTRACE [main] - <==        Row: 2, 周老师DEBUG [main] - <==      Total: 1------------DEBUG [main] - ==>  Preparing: select id,name from teacher where id = ? DEBUG [main] - ==> Parameters: 1(Integer)TRACE [main] - <==    Columns: id, nameTRACE [main] - <==        Row: 1, 陈老师DEBUG [main] - <==      Total: 1</code></pre><blockquote><p>分析：如果没有缓存机制，我们发送了四条查询语句，应该有四条查询语句，为什么只有三条呢。在mybatis一级缓存下，创建一个Sqlsession对象，每查询一次，就会将值存入一个map下，所以前三条，两句一样的，所以只发送了两条查询。三条查询之后我们关闭了Sqlsession新建了一个，map又是一个新的map了，所以是三条查询语句。</p></blockquote><h2 id="缓存的一些概念"><a href="#缓存的一些概念" class="headerlink" title="缓存的一些概念"></a>缓存的一些概念</h2><h3 id="什么数据适合放入缓存"><a href="#什么数据适合放入缓存" class="headerlink" title="什么数据适合放入缓存"></a>什么数据适合放入缓存</h3><blockquote><p>一般情况下，经常被查询并且很少被修改的数据(读远远大于写操作的数据)</p></blockquote><h3 id="缓存性能相关属性"><a href="#缓存性能相关属性" class="headerlink" title="缓存性能相关属性"></a>缓存性能相关属性</h3><blockquote><ul><li>命中率：从缓存中查询出来的数量/总的查询数量</li><li>最大对象数量: 缓存区域中最多存储多少个数据，可以写出到硬盘里面(序列化)</li><li>最大空闲时间: 如果一个数据在缓存中一直未被查询，达到一定时间就会被清除</li></ul></blockquote><h3 id="一级缓存与二级缓存的作用区间"><a href="#一级缓存与二级缓存的作用区间" class="headerlink" title="一级缓存与二级缓存的作用区间"></a>一级缓存与二级缓存的作用区间</h3><blockquote><ul><li>一级缓存：SqlSession级别的，每次创建新的SqlSession对象，一级缓存空间就改变了。不同的SqlSession对象是不共享数据的。</li><li>二级缓存：mapper级别的，作用域是mapper文件的同一个namespace，二级缓存应该和namespace绑定在一起。不同的SqlSession对象是共享数据的</li></ul></blockquote><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>mybatis中的使用，只要实现Cache接口就可以了，Mybatis已经提供了一个自带的缓存技术</p><blockquote><ol><li>全局配置文件中启动二级缓存<br><code>`</code>xml</li></ol></blockquote><p><setting name="cacheEnabled" value="true"></setting></p><pre><code>&gt; 2. 在mapper文件中，使用cache元素，把namespace和缓存相绑定```xml&lt;cache/&gt;</code></pre><blockquote><ol start="3"><li>把放入二级缓存对象实现序列化接口<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></li></ol></blockquote><h3 id="配置细节"><a href="#配置细节" class="headerlink" title="配置细节"></a>配置细节</h3><p>启动二级缓存之后</p><blockquote><ul><li>mapper文件中所有的select元素都会使用到缓存</li><li>在大多数情况下，针对于列表查询(查询多条数据)，设置为不缓存，只有SQL和参数相同的时候，才会使用到缓存</li><li>一般的，只会对get方法做查询缓存</li><li>默认情况下，INSERT，DELETE，UPDATE操作都会去刷新缓存，但是对象插入操作没有刷新缓存的必要.</li></ul></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-----对象关系</title>
      <link href="/mybatis-base3.html"/>
      <url>/mybatis-base3.html</url>
      
        <content type="html"><![CDATA[<h2 id="对象关系设计"><a href="#对象关系设计" class="headerlink" title="对象关系设计"></a>对象关系设计</h2><p>前面两个是表现为纵向关系，后面的表现为横向关系，强弱关系如下: 组合 &gt; 聚合 &gt; 关联 &gt; 依赖，这几种关系都是语义级别的关系，所以从代码层面并不能完全区别各种关系。在面向对象设计的过程中，能采用强度大的关系，绝不能采取强度小的关系。</p><h3 id="泛化关系-generalization"><a href="#泛化关系-generalization" class="headerlink" title="泛化关系(generalization)"></a>泛化关系(generalization)</h3><blockquote><p>就是继承关系，类与类之间，接口与接口之间，使用extends表示</p></blockquote><p>箭头指向：带三角箭头的实线，箭头指向父类</p><h3 id="实现关系-realization"><a href="#实现关系-realization" class="headerlink" title="实现关系(realization)"></a>实现关系(realization)</h3><blockquote><p>类与接口之间的关系，implements</p></blockquote><p>箭头指向：带三角箭头的虚线，箭头指向接口</p><h3 id="依赖关系-dependent"><a href="#依赖关系-dependent" class="headerlink" title="依赖关系(dependent)"></a>依赖关系(dependent)</h3><blockquote><p>A类依赖于B类的定义，A类中存在B</p><ul><li>成员变量依赖</li><li>成员方法参数依赖</li><li>成员方法内部依赖(在方法内部定义)</li></ul></blockquote><p>箭头及指向：带箭头的虚线，指向被使用者</p><h3 id="关联关系-assocoation"><a href="#关联关系-assocoation" class="headerlink" title="关联关系(assocoation)"></a>关联关系(assocoation)</h3><blockquote><p>A对象依赖B对象，并且把B作为A的一个成员变量，则A和B存在关联关系(特殊的依赖关系)</p></blockquote><p>箭头及指向：带普通箭头的实心线，指向被拥有者<br>按多重性分：</p><blockquote><ul><li>一对多</li><li>一对多</li><li>多对一(√)</li><li>多对多(√)</li></ul></blockquote><p>按照导航分：如果通过A对象中的某一个属性可以访问到B对象，则说A可以导航到B</p><blockquote><ul><li>单向：只能从A通过属性导航到B，B不能到A</li><li>双向：A可以通过属性导航到B，B也可以导航到A</li></ul></blockquote><blockquote><ul><li>单向一对多，多对一</li><li>双向多对一，一对多</li></ul></blockquote><h3 id="聚合关系-aggregation"><a href="#聚合关系-aggregation" class="headerlink" title="聚合关系(aggregation)"></a>聚合关系(aggregation)</h3><blockquote><p>是一种”弱拥有”关系，表示为has-a。表示为整体和个体之间可以相互独立存在，一定是有两个模块来分别管理整体和个体，耦合性弱</p></blockquote><p>箭头及指向：带空心菱形的实心线，菱形指向整体</p><p>如果A和B是聚合关系，他们并不是一个独立的整体，A和B的生命周期可以是不同的，通常B也是会作为A的成员变量存在</p><h3 id="组合关系-composition"><a href="#组合关系-composition" class="headerlink" title="组合关系(composition)"></a>组合关系(composition)</h3><blockquote><p>强聚合关系，“强拥有”关系，表示为contains-a，耦合性强</p></blockquote><p>箭头及指向：带实心菱形的实线，菱形指向整体</p><p>整体和个体不能独立存在，一定是在一个模块中同时管理整体和个体，生命周期必须相同(级联(cascade)：把主对象的操作遍历的在每一个从对象上面执行相同的操作)</p><p>看到一段通俗的解释，挂在此处:</p><blockquote><p>学生的学习需要文具，这是依赖；学生的一端是老师，这是关联。学生和班级，这是聚合。学生和心脏，这是组合。学生和他爹，这是泛化的集合成。学生和美食，给他一个吃饭接口。学生真好，但你不能一直是学生。</p></blockquote><h2 id="多对一的额外SQL查询，以及内敛映射消除n-1问题"><a href="#多对一的额外SQL查询，以及内敛映射消除n-1问题" class="headerlink" title="多对一的额外SQL查询，以及内敛映射消除n+1问题"></a>多对一的额外SQL查询，以及内敛映射消除n+1问题</h2><p>数据库两个表：员工表与部门表<br><img src="/img/mybatis/study-notes/3/1.png" alt="图片"></p><p>给出数据：<br><img src="/img/mybatis/study-notes/3/4.png" alt="图片"></p><p><strong>domain</strong>:<br><em>Employee.java</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    Department dept<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><em>Department.java</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Getter<span class="token punctuation">;</span><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>Setter<span class="token punctuation">;</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意两个实体类之间与数据表之间对应关系有点不同</p><p><strong>Mapper:</strong><br>EmployeeMapper.java_</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>    Employee <span class="token function">query1</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><em>EmployeeMapper.xml</em></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query1<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from employee where id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p><strong>Test</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testquery1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        SqlSession session <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EmployeeMapper employeeMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee e <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">query1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>结果:</p><pre class=" language-txt"><code class="language-txt">DEBUG [main] - ==>  Preparing: select * from employee where id = ? DEBUG [main] - ==> Parameters: 2(Integer)TRACE [main] - <==    Columns: id, name, dept_idTRACE [main] - <==        Row: 2, 艾弗孙, 10DEBUG [main] - <==      Total: 1Employee(id=2, name=艾弗孙, dept=null)</code></pre><p>可以发现数据表中查询的结果是deptid，而对象中存储的结果是一个department对象,不对应所以打印出来表现为null。有两种解决方案：</p><ul><li>测试类中专门写一条查询来设置部门对象</li><li>利用mybatis的<strong>resultMap</strong></li></ul><p>添加:<br><strong>Mapper</strong><br><em>DepartmentMapper.java</em></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><em>DepartmentMapper.xml</em></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper.DepartmentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Department<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select id,name from depart where id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>修改<em>Employee.xml</em>，以及其中的对应关系<br><img src="/img/mybatis/study-notes/3/2.png" alt="修改"></p><p>这样是不是方便很多，让我们来看看日志(日志真的很重要):</p><pre class=" language-txt"><code class="language-txt">DEBUG [main] - ==>  Preparing: select * from employee where id = ? DEBUG [main] - ==> Parameters: 2(Integer)TRACE [main] - <==    Columns: id, name, dept_idTRACE [main] - <==        Row: 2, 艾弗孙, 10DEBUG [main] - ====>  Preparing: select id,name from depart where id=? DEBUG [main] - ====> Parameters: 10(Integer)TRACE [main] - <====    Columns: id, nameTRACE [main] - <====        Row: 10, 开发组DEBUG [main] - <====      Total: 1DEBUG [main] - <==      Total: 1Employee(id=2, name=艾弗孙, dept=Department(id=10, name=开发组))</code></pre><p>关于association元素</p><ul><li>元素本身：配置单一元素的关联关系</li><li>select属性：发送额外的SQL</li><li>column属性：将指定列的值传递给额外的SQL，见上</li></ul><h3 id="N-1问题和内联映射"><a href="#N-1问题和内联映射" class="headerlink" title="N + 1问题和内联映射"></a>N + 1问题和内联映射</h3><p>利用上面的方法查询所有数据，看一段日志文件:</p><pre class=" language-log"><code class="language-log">DEBUG [main] - ==>  Preparing: select * from employeeDEBUG [main] - ==> Parameters: TRACE [main] - <==    Columns: id, name, dept_idTRACE [main] - <==        Row: 1, 火星包, 10DEBUG [main] - ====>  Preparing: select id,name from depart where id=? DEBUG [main] - ====> Parameters: 10(Integer)TRACE [main] - <====    Columns: id, nameTRACE [main] - <====        Row: 10, 开发组DEBUG [main] - <====      Total: 1TRACE [main] - <==        Row: 2, 艾弗孙, 20DEBUG [main] - ====>  Preparing: select id,name from depart where id=? DEBUG [main] - ====> Parameters: 20(Integer)TRACE [main] - <====    Columns: id, nameTRACE [main] - <====        Row: 20, 硬件组DEBUG [main] - <====      Total: 1TRACE [main] - <==        Row: 3, last炫, 30DEBUG [main] - ====>  Preparing: select id,name from depart where id=? DEBUG [main] - ====> Parameters: 30(Integer)TRACE [main] - <====    Columns: id, nameTRACE [main] - <====        Row: 30, web组DEBUG [main] - <====      Total: 1TRACE [main] - <==        Row: 4, 深海鱼, 40DEBUG [main] - ====>  Preparing: select id,name from depart where id=? DEBUG [main] - ====> Parameters: 40(Integer)TRACE [main] - <====    Columns: id, nameTRACE [main] - <====        Row: 40, 软件组DEBUG [main] - <====      Total: 1DEBUG [main] - <==      Total: 4Employee(id=1, name=火星包, dept=Department(id=10, name=开发组))Employee(id=2, name=艾弗孙, dept=Department(id=20, name=硬件组))Employee(id=3, name=last炫, dept=Department(id=30, name=web组))Employee(id=4, name=深海鱼, dept=Department(id=40, name=软件组))</code></pre><p>可以发现结果集的操作会产生n条sql语句，就是n+1问题。增多数据库的查询次数会限制数据库的性能</p><blockquote><p>利用多表查询(JOIN)一条SQL语句搞定</p></blockquote><p><em>Employee.xml</em></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 解决N+1问题--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept.name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>querylistAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select e.id,e.name,        d.id as d_id, d.name as d_name        from employee e join depart d on e.dept_id = d.id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>通过日志文件我们可以发现，查询语句只有一条了</p><p>为了更直观，更高大上，我们可以将<em>resultMap</em>的语句改进一下</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dept<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Department<span class="token punctuation">"</span></span> <span class="token attr-name">columnPrefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>d_<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>  <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span></code></pre><p>注意一下columnPrefix属性</p><p>总结:<br>多对一配置的时候:</p><blockquote><p>使用association元素，配置单一对象属性</p><ul><li>方式一：额外SQL(分布查询) 集合属性</li><li>方式二：内敛映射(多表查询) 消除N+1问题</li></ul></blockquote><h2 id="实体类与表"><a href="#实体类与表" class="headerlink" title="实体类与表"></a>实体类与表</h2><p>在一对多或者多对一关系中，外键在many方，设计对象的时候：我们一般考虑使用单向的多对一就可以了，一般不会使用单向的一对多，即使要用一对多，也应该使用双向关联，或者在many方存储one方的ID</p><h2 id="一对多的额外SQL查询，以及内敛映射消除n-1问题"><a href="#一对多的额外SQL查询，以及内敛映射消除n-1问题" class="headerlink" title="一对多的额外SQL查询，以及内敛映射消除n+1问题"></a>一对多的额外SQL查询，以及内敛映射消除n+1问题</h2><p>数据表数据同 <em>2</em><br>实体类:<br><img src="/img/mybatis/study-notes/3/3.png" alt="实体类"></p><ul><li>额外SQL(分步查询)<br>与多对一大体相同，就是对于处理集合对象和单一对象的区别：<blockquote><p>association: 针对处理单一对象属性<br>collection: 针对集合属性</p></blockquote></li></ul><p>直接上图:<br><img src="/img/mybatis/study-notes/3/5.png" alt="实体类"></p><ul><li>内敛映射<br>与2类似，直接看代码<br><img src="/img/mybatis/study-notes/3/6.png" alt="实体类"></li></ul><p>这里的ofType不能少的，在分布查询的过程中，我们看collection是没有写ofType的，但是为什么这里必须要写呢？因为在分布查询中，在Employee.xml中，我们的select元素中是有resultType的，这里就声明了类型，而在内敛映射中，是没有这个过程的，所以需要我们自己手动告诉mybatis的数据类型。</p><h2 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h2><blockquote><p>lazy load: 在真正需要使用数据的时候，才会去执行SQL去查询数据</p></blockquote><p>为了避免一些无所谓的性能开销而提出的一个概念</p><p>利用之前学过的分布查询来举例：</p><p>看一段查询：<br><img src="/img/mybatis/study-notes/3/7.png" alt="实体类"></p><p>在本次查询中额外的查询是多余的，可以通过懒加载去掉.<br>在主配置文件 mybatis-config.xml 中加入下列代码开启延迟加载:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 开启延迟加载 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置不要积极去查询关联对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aggressiveLazyLoading<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 延迟加载触发的方法 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clone<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p>同样的查询测试在看日志:</p><pre class=" language-txt"><code class="language-txt">DEBUG [main] - ==>  Preparing: select id,name from depart where id=? DEBUG [main] - ==> Parameters: 10(Integer)TRACE [main] - <==    Columns: id, nameTRACE [main] - <==        Row: 10, 开发组DEBUG [main] - <==      Total: 1Department [id=10, name=开发组]</code></pre><p>额外sql并没有触发</p><p>但是我们并没有写在方法或者接口里面写这些延迟加载的这些属性，是怎么实现的呢<br>我们打印上述测试中 <em>d.getClass()</em> 会发现是以下 </p><blockquote><p>class domain.Department_$$_jvstc86_0</p></blockquote><p>可见，其内部是通过动态代理实现的</p><h3 id="实际开发的选择"><a href="#实际开发的选择" class="headerlink" title="实际开发的选择"></a>实际开发的选择</h3><blockquote><p>在开发中：<br>针对单属性对象，使用association元素，通常直接使用多表查询操作，也就是使用内敛查询<br>针对集合属性对象，使用collection元素，通常使用延迟加载，也就是额外SQL处理</p></blockquote><h2 id="多对多关系"><a href="#多对多关系" class="headerlink" title="多对多关系"></a>多对多关系</h2><p>数据表:<br><img src="/img/mybatis/study-notes/3/8.png" alt="png"></p><p>实体类:<br><img src="/img/mybatis/study-notes/3/9.png" alt="png"></p><p>定义Student时，list定义成</p><blockquote><p>private List<teacher> teachers = new ArrayList<teacher>();</teacher></teacher></p></blockquote><blockquote><p>除了插入操作以外，还要在建立一个维护关系操作，Student中要有除了插入stu表，还要对stu_teacher表进行维护，因为是多对多的单向关联，集合在Student类中，所以插入操作定义在Student一方。<br>更新，查询基本之前的操作差不多，不多描述。查询相对麻烦，之前我们说过，这里是集合，用collection处理，我们尽量使用分步查询，懒加载的操作。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-----动态sql</title>
      <link href="/mybatis-base2.html"/>
      <url>/mybatis-base2.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-和"><a href="#1-和" class="headerlink" title="1.#和$"></a>1.#和$</h2><p>Mapper.xml中：<br>用#和\$获取信息</p><blockquote><p>SELECT id,username,password FROM client WHERE username = #{u_name} AND password = #{u_password}<br>SELECT id,username,password FROM client WHERE username = \${u_name} AND password = \${u_password}</p></blockquote><p>让我们来看一看后台生成的SQL语句:<br>使用#:<br>Preparing: SELECT id,username,password FROM client WHERE username = ? AND password = ?<br>Parameters: will(String), 1111(String)</p><p>使用$:<br>Preparing: SELECT id,username,password FROM client WHERE username = root AND password = chase<br> Parameters: </p><h3 id="1-1-和-符号的异同"><a href="#1-1-和-符号的异同" class="headerlink" title="1.1 #和$符号的异同:"></a>1.1 #和$符号的异同:</h3><p> 相同:  都可以通过 # 和 \$ 来获取对象中的信息。<br> 不同: </p><ul><li>使用#传递的参数会先转换为占位符’？’，再通过设置占位符参数的方式来设置值(统统会给值使用单引号引用)</li><li>使用\$传递的参数，直接把解析出来的数据作为SQL语句的一部分</li></ul><p>$有妙用就是在于稍微复杂的sql语句:<br>例如sql排序查找:<br>例如:</p><blockquote><p>SELECT id,username,password FROM client ORDER BY id desc<br>如果用 # 处理:<br>SELECT id,username,password FROM client ORDER BY #{orderBy}<br>假如 orderby 参数传入的是 id desc<br>执行以后就是 SELECT id,username,password FROM client ORDER BY ‘id desc’   ，该语句无效，<br>正确的语句应该是:<br> SELECT id,username,password FROM client ORDER BY \${orderBy}<br>内部生成的sql语句应该是 SELECT id,username,password FROM client ORDER BY id desc  无引号<br>所以这里的限定条件是不能用 # 处理的，要用 $</p></blockquote><h2 id="2-注解"><a href="#2-注解" class="headerlink" title="2.注解"></a>2.注解</h2><ul><li>方式一: 使用xml配置，把SQL和映射写在XML文件中              (推荐)</li><li>方式二: 使用注解配置，把SQL和映射写在Java代码中(Mapper接口)<br>如果sql语句很多前者看起来更直观</li></ul><p>可以看见是没有Mapper.xml文件的<img src="/img/mybatis/study-notes/2/1.png" alt="图片"><br>mybatis-config.xml配置: 关联接口</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token number">2</span><span class="token punctuation">.</span>关联映射文件<span class="token operator">/</span>Mapper接口 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>mappers<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 关联Mapper接口 使用注解 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>mapper <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"mapper.UserMapper"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 关联xml映射文件<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  <span class="token operator">&lt;</span>mapper resource<span class="token operator">=</span><span class="token string">"mapper/UserMapper.xml"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>mappers<span class="token operator">></span></code></pre><blockquote><p>这里注意: 关联类的时候路径写’.’，其他文件使用 ‘/‘  这里开始他一直报错说找不到我的mapper.UserMapper类，就是因为我用了 ‘/‘</p></blockquote><p>UserMapper.java 加注解:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> mapper<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Delete<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Insert<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Options<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Select<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Update<span class="token punctuation">;</span><span class="token keyword">import</span> domain<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO t_user (id,name,salary) values (#{id},#{name},#{salary})"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>User u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE t_user SET salary = #{salary} where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>User u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM t_user where id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id,name,salary FROM t_user WHERE id = #{id}"</span><span class="token punctuation">)</span>    User <span class="token function">get</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id,name,salary FROM t_user"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-1-注解中如何使用ResultMap"><a href="#2-1-注解中如何使用ResultMap" class="headerlink" title="2.1 注解中如何使用ResultMap"></a>2.1 注解中如何使用ResultMap</h3><p>xml文件中是有resultmap来处理表名与我们创建的实体类名不匹配的问题，那么注解的实现<br>假设数据库创建语句:</p><pre class=" language-java"><code class="language-java">CREATE TABLE `t_user` <span class="token punctuation">(</span>  `u_id` <span class="token function">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT<span class="token punctuation">,</span>  `u_name` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> DEFAULT NULL<span class="token punctuation">,</span>  `u_salary` <span class="token function">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> DEFAULT NULL<span class="token punctuation">,</span>  PRIMARY <span class="token function">KEY</span> <span class="token punctuation">(</span>`id`<span class="token punctuation">)</span><span class="token punctuation">)</span> ENGINE<span class="token operator">=</span>InnoDB AUTO_INCREMENT<span class="token operator">=</span><span class="token number">12</span> DEFAULT CHARSET<span class="token operator">=</span>utf8mb4 COLLATE<span class="token operator">=</span>utf8mb4_0900_ai_ci<span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT u_id, u_name, u_salary FROM t_user WHERE u_id = #{id}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"BaseResultMap"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"u_id"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"u_name"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>column<span class="token operator">=</span><span class="token string">"u_salary"</span><span class="token punctuation">,</span> property<span class="token operator">=</span><span class="token string">"salary"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>User <span class="token function">get</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么下一次引用就不用写这么一串了，不用重复写:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT id,name,salary FROM t_user"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"BaseResultMap"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">listAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>@Select()注解中，如果语句过长，是可以分开写的，因为内部是String数组，例:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"SELECT u_id, u_name, u_salary FROM t_user"</span><span class="token punctuation">,</span><span class="token string">" WHERE u_id = #{id}"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p><strong>实际开发中xml更多，而不是注解</strong></p><h2 id="3-动态SQL"><a href="#3-动态SQL" class="headerlink" title="3. 动态SQL"></a>3. 动态SQL</h2><p>这个比较强大，有了前面的基础，使用起来十分简单了<br>数据库:</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>employee<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>sn<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>salary<span class="token punctuation">`</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>deptId<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">7</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci<span class="token punctuation">;</span></code></pre><p>数据:<img src="/img/mybatis/study-notes/2/2.png" alt="数据表"></p><p>Mapper接口(面向接口编程):</p><h3 id="3-1-if的使用"><a href="#3-1-if的使用" class="headerlink" title="3.1 if的使用"></a>3.1 if的使用</h3><p>目的：查询工资大于等于900 小于 1200的员工</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//这里使用@Param传参就很舒服</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">query2</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"minSalary"</span><span class="token punctuation">)</span> BigDecimal minSalary<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"maxSalary"</span><span class="token punctuation">)</span> BigDecimal maxSalary            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Mapper.xml配置(不使用注解):</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query2<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT id, name, sn,salary,deptId FROM employee        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minSalary!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            WHERE salary >= #{minSalary}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minSalary!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            AND salary <span class="token entity" title="&lt;">&amp;lt;</span>= #{maxSalary}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><blockquote><p>这里有一个坑点就是 ‘&lt;’符号放在sql会被读成 标签开始的 符号需要用 <strong>&amp;lt</strong>表示’&lt;’，见上语句</p></blockquote><p>测试语句:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查询工资大于等于900 小于 1200的员工</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSession session <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EmployeeMapper em <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> ems <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">query2</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee employee <span class="token operator">:</span> ems<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>测试结果(一定要多用日志功能，真的很强大，有的sql语句的错误瞄一眼就知道了):<br><img src="/img/mybatis/study-notes/2/3.png" alt="png"></p><h3 id="3-2-choose的使用"><a href="#3-2-choose的使用" class="headerlink" title="3.2 choose的使用"></a>3.2 choose的使用</h3><p>Mapper接口:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">query3</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"minSalary"</span><span class="token punctuation">)</span> BigDecimal minSalary<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"maxSalary"</span><span class="token punctuation">)</span> BigDecimal maxSalary<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"deptId"</span><span class="token punctuation">)</span> Long deptId            <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Mapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query3<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT id, name, sn,salary,deptId FROM employee        WHERE 1=1        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minSalary!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            AND salary >= #{minSalary}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minSalary!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            AND salary <span class="token entity" title="&lt;">&amp;lt;</span>= #{maxSalary}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deptId <span class="token punctuation">></span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>AND deptId = #{deptId}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>AND deptId IS NOT NULL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意这里<strong>WHERE 1 = 1</strong>的使用，感觉是很精巧了,但是很low</p></blockquote><p>测试java:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测一下20号部门的人，这里即使是传入null也没有问题，得益于上面的 WHERE 1=1,相当于一个占据了第一个WHERE，后面的无脑AND连接就行,也不会报错</span><span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SqlSession session <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EmployeeMapper em <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> ems <span class="token operator">=</span> em<span class="token punctuation">.</span><span class="token function">query3</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span> 20L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee employee <span class="token operator">:</span> ems<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>结果:<br><img src="/img/mybatis/study-notes/2/4.png" alt="结果"></p><h3 id="3-3-where元素的使用"><a href="#3-3-where元素的使用" class="headerlink" title="3.3 where元素的使用"></a>3.3 where元素的使用</h3><blockquote><p>作用: 判断查询条件是否有WHERE关键字，若没有，则在第一个查询之前插入一个WHERE关键字;如果发现查询条件以AND或者OR开头，也会把第一个查询条件前的AND/OR替换成WHERE<br>所以说上面的WHERE 1 = 1就用where代替了<br><code>`</code>xml</p></blockquote><select id="query3" resulttype="Employee">        SELECT id, name, sn,salary,deptId FROM employee                                    AND salary &gt;= #{minSalary}                                        AND salary &lt;= #{maxSalary}                                        AND deptId = #{deptId}                AND deptId IS NOT NULL                        </select><br><code>### 3.4 set&gt; 跟where类似，用来判断update中是否有','或者 多了 ','，也会自己加set就随便找个案例了</code>xml<br><update id="updateAuthorIfNecessary"><br>  update Author<br>    <set><br>      <if test="username != null">username=#{username},</if><br>      <if test="password != null">password=#{password},</if><br>      <if test="email != null">email=#{email},</if><br>      <if test="bio != null">bio=#{bio}</if><br>    </set><br>  where id=#{id}<br></update><br><code>### 3.5 trim</code>xml<br><trim prefix="" prefixoverrides="" suffix="" suffixoverrides=""><br></trim><br><code>前提：trim元素包含内容返回了一个字符串* prefix: 在这个字符串之前插入了一个prefix属性值* prefixOverrides: 如果字符串的内容以prefixOverrides中的内容开头(可以包含管道符号)，那么使用perfix属性值替换内容的开头* suffix: 在这个字符串之后插入suffix属性值* suffixOverrides: 如果字符串的内容以prefixOverrides中的内容结尾(可以包含管道符号)，那么使用suffix属性值替换内容的结尾可以代替set和where，但是不会这么做</code>xml<br><trim prefix="WHERE" prefixoverrides="AND |OR"></trim><br><br><trim prefix="SET" suffixoverrides=","></trim><br><code>### 3.6 foreach</code>xml<br><foreach collection="" close="" index="" item="" open="" separator=""></foreach><br><code>* collection：表示对哪一个集合或数组做迭代，如果参数是数组类型，此时Map的key为array;如果参数是list类型，此时Map的key为list，我们可以在参数上使用Param注解，规定死Map中的key是什么* open：在迭代集合之前，拼接什么符号* close：在迭代集合之后，拼接什么符号* separator：在迭代元素时，每一个元素之间使用什么符号分割开来* item：被迭代的每一个元素的变量* index：迭代的索引批量删除实例：xml配置</code>xml<br><delete id="batchDelete"><br>        DELETE FROM employee WHERE id IN<br>        <foreach collection="ids" open="(" close=")" item="id" separator=","><br>            #{id}<br>        </foreach><br></delete><br><code>接口:</code>java<br>void batchDelete(@Param(“ids”) Long[] ids);<br><code>批量插入实例：xml配置:</code>xml<br><insert id="batchSave"><br>    insert into employee (name,sn,salary) values<br>    <foreach collection="emps" separator="," item="e"><br>        (#{e.name},#{e.sn},#{e.salary})<br>    </foreach><br></insert><br><code>接口:</code>java<br>void batchSave(@Param(“emps”) List<employee> emps);<br><code>## 4. 高级查询和分页查询* 高级查询封装高级查询信息</code>java<br>@Data<br>public class EmployeeQueryObject {<br>    private String keyword;            //员工的姓名或者编号<br>    private BigDecimal minSalary;    //最低工资<br>    private BigDecimal maxSalary;    //最高工资<br>    private Long deptId;        //部门ID<br>}<br><code>mapper.xml配置:</code>java<br>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>&lt;!DOCTYPE mapper<br>  PUBLIC “-//mybatis.org//DTD Mapper 3.0//EN”<br>  “<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;>" target="_blank" rel="noopener">http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</a><br><mapper namespace="mapper.EmployeeMapper"><br>    <select id="queryForList" resulttype="Employee">        SELECT id,name,sn,salary,deptId FROM employee                                    AND (name LIKE concat(‘%’,#{keyword},’%’) OR sn LIKE concat(‘%’,#{keyword},’%’))                                        AND salary &gt;= #{minSalary}                                        AND salary &lt;=#{maxSalary}                                        AND deptId = #{deptId}                        </select><p></p></mapper><p></p><pre><code>Mapper接口```javapublic interface EmployeeMapper {    List&lt;Employee&gt; queryForList(EmployeeQueryObject qo);}</code></pre><p>测试:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 需求：按照员工关键字(abc)，工资范围，所属部门查询</span>    <span class="token comment" spellcheck="true">// 高级查询</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EmployeeQueryObject qs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmployeeQueryObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        qs.setKeyword(" ");</span>        qs<span class="token punctuation">.</span><span class="token function">setMinSalary</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qs<span class="token punctuation">.</span><span class="token function">setMaxSalary</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qs<span class="token punctuation">.</span><span class="token function">setDeptId</span><span class="token punctuation">(</span>30L<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession session <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EmployeeMapper employeeMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>EmployeeMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> es <span class="token operator">=</span> employeeMapper<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>qs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Employee employee <span class="token operator">:</span> es<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>分页查询</li></ul></employee><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-----一些简单的概念和配置</title>
      <link href="/mybatis-base1.html"/>
      <url>/mybatis-base1.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习mybatis过程中做的一点笔记，一方面有助于学习，一方面方便捡起来。</p></blockquote><h4 id="1-类型别名是为-Java-类型设置一个短的名字。-它只和-XML-配置有关，存在的意义仅在于用来减少类完全限定名的冗余。"><a href="#1-类型别名是为-Java-类型设置一个短的名字。-它只和-XML-配置有关，存在的意义仅在于用来减少类完全限定名的冗余。" class="headerlink" title="1.类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。"></a>1.类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</h4><p>例如：(mapper文件中)</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"listAll"</span> resultType<span class="token operator">=</span><span class="token string">"hello.User"</span><span class="token operator">></span>    SELECT id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>salary FROM t_user<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><p> <b>resultType=”hello.User”</b>  如果包名很长，（此处包名是hello，比较短）那么不是写一堆吗，很麻烦就有了<b>别名</b>，mybatis定义在mybatis-config中.</p><p>上面的别名是精确到类，如果类很多，那么还是相对麻烦了，就有了指定包名，MyBatis 会在包名下面搜索需要的 Java Bean</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>typeAliases<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token keyword">package</span> name<span class="token operator">=</span><span class="token string">"domain.blog"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>typeAliases<span class="token operator">></span></code></pre><p>每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。如果还是想在此基础上，将名字改成自己像定义的名字，比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。例子如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Author</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>一般为了方便看，所以是不会起自己的名字，最好就是类名，易于辨别，避免使用此注解。</p><h4 id="2-结果映射"><a href="#2-结果映射" class="headerlink" title="2.结果映射"></a>2.结果映射</h4><p>如果忘记写 <b>resultType=”int”</b>抛出以下异常</p><pre class=" language-java"><code class="language-java"> Cause<span class="token operator">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>executor<span class="token punctuation">.</span>ExecutorException<span class="token operator">:</span> A query was run and no Result Maps were found <span class="token keyword">for</span> the Mapped Statement <span class="token string">'hello.UserMapper.queryForCount'</span><span class="token punctuation">.</span>  It's likely that neither a Result Type nor a Result Map was specified<span class="token punctuation">.</span> </code></pre><p>找不到结果映射类型匹配结果</p><h4 id="3-resultMap-与-resultType"><a href="#3-resultMap-与-resultType" class="headerlink" title="3.resultMap 与 resultType"></a>3.resultMap 与 resultType</h4><p>mybatis操作中，resultType经常用于存放一个对象，resultMap则是处理结果集(表)中的resultType列名和表对象中的属性名称不匹配。<br>数据库建表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>t_id<span class="token punctuation">`</span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>t_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>t_salary<span class="token punctuation">`</span> <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">8</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8mb4_0900_ai_ci<span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> BigDecimal salary<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此时直接用resultType时会报错的,可以使用以下方法处理。</p><h5 id="1-sql语句处理"><a href="#1-sql语句处理" class="headerlink" title="1) sql语句处理"></a>1) sql语句处理</h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"listAll"</span> resultType<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span>        SELECT t_id as id<span class="token punctuation">,</span>t_name as name<span class="token punctuation">,</span>t_salary as salary FROM t_user<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span>`</code></pre><h5 id="2-resultMap-：-结果集合的映射"><a href="#2-resultMap-：-结果集合的映射" class="headerlink" title="2) resultMap ： 结果集合的映射"></a>2) resultMap ： 结果集合的映射</h5><pre><code>id: 当前Mapper文件中的resultMap的唯一名称type: 把结果集中的每一行数据封装成什么类型的对象子元素:     id: 功能和result有一模一样，如果是主键建议使用id元素,提升性能    result: 匹配对象中的哪一个属性对应表中的哪一个列</code></pre><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>resultMap type<span class="token operator">=</span><span class="token string">"User"</span> id<span class="token operator">=</span><span class="token string">"BaseResultMap"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"id"</span> property<span class="token operator">=</span><span class="token string">"id"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"name"</span> property<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"salary"</span> property<span class="token operator">=</span><span class="token string">"salary"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>引用<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"listAll"</span> resultMap<span class="token operator">=</span><span class="token string">"BaseResultMap"</span><span class="token operator">></span>        SELECT t_id<span class="token punctuation">,</span>t_name<span class="token punctuation">,</span>t_salary FROM t_user    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><h4 id="4-查询表中的部分列映射对象使用map"><a href="#4-查询表中的部分列映射对象使用map" class="headerlink" title="4.查询表中的部分列映射对象使用map"></a>4.查询表中的部分列映射对象使用map</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//查询表中一行的所有属性</span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"get"</span> resultType<span class="token operator">=</span><span class="token string">"hello.User"</span><span class="token operator">></span>    SELECT id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>salary FROM t_user WHERE id <span class="token operator">=</span> #<span class="token punctuation">{</span>id<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token comment" spellcheck="true">//查询表中一行的部分属性</span><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"queryForMap"</span> resultType<span class="token operator">=</span><span class="token string">"map"</span><span class="token operator">></span>    SELECT id<span class="token punctuation">,</span>name FROM t_user<span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span></code></pre><h4 id="5-properties的使用"><a href="#5-properties的使用" class="headerlink" title="5.properties的使用"></a>5.properties的使用</h4><p>比较简单的就是放在文件的首部，后面的引用就是直接 <strong>${<em>name</em>}</strong><br>例如：</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driver"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>至于这个为什么这么长，是mysql版本的问题<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/stu?useSSL=false&amp;amp;serverTimezone=GMT%2B8"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"xxxxx"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span></code></pre><p>properties比较好就是在于可以引用外部文件<br>例如创建一个<strong>db.properties</strong>文件,<strong>记住不要多空格什么，会出错的。</strong></p><pre class=" language-java"><code class="language-java">#key<span class="token operator">=</span>valuedriver<span class="token operator">=</span>com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driverurl<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>stu<span class="token operator">?</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span>GMT<span class="token operator">%</span>2B8 username<span class="token operator">=</span>rootpassword<span class="token operator">=</span>xxxxxx</code></pre><p>引用该值加入这个(注意路径，我这个引入文件和被引入文件是在一个文件夹下的)</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> properties加载外部文件 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>properties resource<span class="token operator">=</span><span class="token string">"db.properties"</span><span class="token operator">/</span><span class="token operator">></span></code></pre><h4 id="6-Mapper"><a href="#6-Mapper" class="headerlink" title="6.Mapper"></a>6.Mapper</h4><p>先上代码:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查询t_user表中的结果总数</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2.创建Sqlsessionfactory对象。好比是DataSource</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3.创建SqlSession对象，好比是Connection</span>        SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//使用namespace.id的方式去找到SQL元素，并执行SQL语句</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">"hello.UserMapper.queryForCount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查询t_user表中的 id 列和 name 列</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testGetMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSessionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> us <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"hello.UserMapper.queryForMap"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">:</span> us<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>之前都是使用namespace.id的方法去找到mapper.xml中的SQL元素，并执行SQL语句<br>这里有几个不足：</p><ul><li>传入的参数是String类型的参数，写错的时候只能在运行的时候发现，例如：<blockquote><p>hello.UserMapper.queryForMap<br>hello.USerMapper.queryForMap</p></blockquote></li><li>传入MyBatis需要的参数的类型是不被检查的，因为Sqlsession中传递的参数类型都是Object类型</li><li>每一个操作的代码模板是一样的，见上，只有中间的操作语句不同。</li></ul><p>解决方案:使用Mapper接口，类似DAO接口，在Mapper接口中去定义每一个操作方法</p><p>Mapper组件: Mapper接口 + Mapper文件</p><blockquote><p>Mapper文件和Mapper接口应该放置在同一个包中<br>Mapper文件中的namespace就设置为对应的Mapper接口的全限定名称<br>Mapper文件中的操作元素的ID对应Mapper接口中的方法名称</p></blockquote><p>Mapper接口的原理: 动态代理<br>代理对象: class com.sun.proxy.$Proxy8<br>具体如何使用动态代理实现的以后再看。</p><h4 id="7-处理mybatis查询传入多个参数"><a href="#7-处理mybatis查询传入多个参数" class="headerlink" title="7. 处理mybatis查询传入多个参数"></a>7. 处理mybatis查询传入多个参数</h4><ul><li>使用JavaBen，就是将参数封装起来成一个对象例如:<br><code>`</code>java<br>import lombok.AllArgsConstructor;<br>import lombok.Getter;</li></ul><p>@AllArgsConstructor<br>@Getter<br>public class LoginVO {<br>    private String username;<br>    private String password;<br>}</p><pre><code>Mapper.java文件：```javapublic interface ClientMapper {    //方式一：把多个参数封装成为javabean    Client login1(LoginVO vo);}</code></pre><p>Mapper.xml配置文件</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper  PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>  <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"mapper.ClientMapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"login1"</span> resultType<span class="token operator">=</span><span class="token string">"client"</span><span class="token operator">></span>        SELECT id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password FROM client         WHERE username <span class="token operator">=</span> #<span class="token punctuation">{</span>username<span class="token punctuation">}</span> AND password <span class="token operator">=</span> #<span class="token punctuation">{</span>password<span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre><p>具体测试:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testLogin1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        LoginVO vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoginVO</span><span class="token punctuation">(</span><span class="token string">"will"</span><span class="token punctuation">,</span> <span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SqlSession session <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ClientMapper clientMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>ClientMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Client client <span class="token operator">=</span> clientMapper<span class="token punctuation">.</span><span class="token function">login1</span><span class="token punctuation">(</span>vo<span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>使用Map对象封装多个参数<br>Mapper.java文件：<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClientMapper</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//方式二:使用Map对象来封装多个参数</span>  Client <span class="token function">login2</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> paramMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>Mapper.xml配置<br><code>`</code>java<br>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>&lt;!DOCTYPE mapper<br>PUBLIC “-//mybatis.org//DTD Mapper 3.0//EN”<br>“<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;>" target="_blank" rel="noopener">http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</a></li></ul><p><mapper namespace="mapper.ClientMapper"><br>    <select id="login2" resulttype="client">        SELECT id,username,password FROM client        WHERE username = #{username1} AND password = #{password1}    </select><br></mapper></p><pre><code>查询测试:```java@Test    void testLogin2() throws Exception {        Map&lt;String, Object&gt; paramMap = new HashMap&lt;String,Object&gt;() {            {                /**                 * 这里的map中对应的key是与mapper.xml文件的查询语句一样的                 */                this.put("username1", "lucy");                this.put("password1", "2222");            }        };        SqlSession session = MyBatisUtil.getSession();        ClientMapper clientMapper = session.getMapper(ClientMapper.class);        Client client = clientMapper.login2(paramMap);        session.close();        System.out.println(client);    }</code></pre><p>注意map中的key是与sql语句中查询语句对应的。见图 <img src="/img/mybatis/study-notes/1/7名称映射.png" alt="jpg"><br>这样的话，就避免产生了生成过多的javabean。在此基础上，进一步使用注解，就可以减少写map的代码。</p><ul><li>@Param注解<br>Mapper.java<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClientMapper</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//方式三:使用Param注解，原理是方式二</span>  Client <span class="token function">login3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"u_name"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"u_password"</span><span class="token punctuation">)</span>  String password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>Mapper.xml配置<pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapperPUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"mapper.ClientMapper"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"login3"</span> resultType<span class="token operator">=</span><span class="token string">"client"</span><span class="token operator">></span>      SELECT id<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password FROM client       WHERE username <span class="token operator">=</span> #<span class="token punctuation">{</span>u_name<span class="token punctuation">}</span> AND password <span class="token operator">=</span> #<span class="token punctuation">{</span>u_password<span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">></span></code></pre>查询测试:<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">testLogin3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>      SqlSession session <span class="token operator">=</span> MyBatisUtil<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ClientMapper clientMapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>ClientMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Client client <span class="token operator">=</span> clientMapper<span class="token punctuation">.</span><span class="token function">login3</span><span class="token punctuation">(</span><span class="token string">"will"</span><span class="token punctuation">,</span><span class="token string">"1111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre>少了一大段map对象的创建，是不是清爽了很多，其实内部也是利用方式二，map完成的。这里也要注意名称映射，见图<br><img src="/img/mybatis/study-notes/1/7名称映射2.png" alt="jpg"></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假答辩之基于Java的聊天工具</title>
      <link href="/plea.html"/>
      <url>/plea.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言：Java课上了解了socket就想写一个聊天工具，寒假就写了这个，感觉还挺有意思的。</p></blockquote><blockquote><ul><li>开发工具：Eclipse IDE(4.9.0)</li><li>jdk: 1.8.0_181</li></ul></blockquote><blockquote><h2 id="1-界面"><a href="#1-界面" class="headerlink" title="1. 界面"></a>1. 界面</h2><p>&nbsp;&nbsp;利用Java swing的组件，配合eclipse拖拽完成的。感觉不太好用，组件什么使用起来都不太方便，最重要的是不好看。后来是在网上找了一个皮肤包导进去才好看了那么一点，Java swing要是可以嵌套css或者有像css那样美化的东西就好了。</p></blockquote><ul><li>登录界面: <img src="/img/plea/login.png" alt="登录图片"></li><li>注册界面: <img src="/img/plea/register.png" alt="注册图片"></li><li>好友列表: <img src="/img/plea/friendlist.png" alt="好友列表"></li><li>信息: <img src="/img/plea/info.png" alt="信息"></li><li>查找: <img src="/img/plea/seek.png" alt="查找"></li><li>聊天窗口: <img src="/img/plea/chatframe.png" alt="聊天窗口"></li></ul><blockquote><h2 id="2-服务器"><a href="#2-服务器" class="headerlink" title="2. 服务器"></a>2. 服务器</h2><blockquote><h3 id="2-1-登录服务器"><a href="#2-1-登录服务器" class="headerlink" title="2.1 登录服务器"></a>2.1 登录服务器</h3><p>&nbsp;&nbsp;可以接收处理客户端的请求。</p><blockquote><ul><li>更新好友列表</li><li>更新用户在线状态</li><li>个人资料更新</li><li>下线</li></ul></blockquote><h3 id="2-2-注册服务器"><a href="#2-2-注册服务器" class="headerlink" title="2.2 注册服务器"></a>2.2 注册服务器</h3><blockquote><ul><li>接受注册请求</li></ul></blockquote><h3 id="2-3-消息转发服务器"><a href="#2-3-消息转发服务器" class="headerlink" title="2.3 消息转发服务器"></a>2.3 消息转发服务器</h3><blockquote><ul><li>处理消息转发</li><li>处理心跳包，更新用户的IP</li></ul></blockquote></blockquote></blockquote><blockquote><h2 id="3-架构"><a href="#3-架构" class="headerlink" title="3. 架构"></a>3. 架构</h2><ul><li>传统的浏览器/服务器架构<blockquote><p><img src="/img/plea/bs.png" alt="图片"></p></blockquote></li><li>我的聊天软件架构<blockquote><p><img src="/img/plea/cs.png" alt="图片"></p></blockquote></li></ul><p>数据库的设计</p><blockquote><p>两张表<br>1.用户信息表<br>2.好友信息表</p></blockquote></blockquote><blockquote><h2 id="4-业务逻辑"><a href="#4-业务逻辑" class="headerlink" title="4. 业务逻辑"></a>4. 业务逻辑</h2><blockquote><p>-登录流程：<img src="/img/plea/loginonline.png" alt="图片"></p></blockquote><blockquote><p>-在线状态: <img src="/img/plea/online.png" alt="图片"></p></blockquote><blockquote><p>-在线聊天: <img src="/img/plea/chatonline.png" alt="图片"></p></blockquote></blockquote><blockquote><h2 id="5-TCP-UDP，Socket"><a href="#5-TCP-UDP，Socket" class="headerlink" title="5. TCP,UDP，Socket"></a>5. TCP,UDP，Socket</h2><blockquote><p>TCP</p><blockquote><p>持续稳定，面向连接，传递的消息不能过大，慢</p></blockquote><p>UDP</p><blockquote><p>无连接,速度快，不稳定</p></blockquote><p>Socket</p><blockquote><p>网络编程</p></blockquote><p>对于Socket与TCP,UDP的关系是怎么样的呢？我之前一直以为是TCP,UDP是基于Socket编写的，后来查资料得知：</p><blockquote><p>TCP/IP只是一个协议栈，就像操作系统的运行机制一样，必须要具体实现，同时还要提供对外的操作接口。就像操作系统会提供标准的编程接口，比如Win32编程接口一样，TCP/IP也必须对外提供编程接口，这就是Socket编程接口。socket跟TCP/IP并没有必然的联系。Socket编程接口在设计的时候，就希望也能适应其他的网络协议。所以，socket的出现只是可以更方便的使用TCP/IP协议栈而已，其对TCP/IP进行了抽象，形成了几个最基本的函数接口。比如create，listen，accept，connect，read和write等等。</p></blockquote><p>前人已经设计好了TCP/IP协议，要是让我们直接用实在是太麻烦了，就有了socket。<b>socket只是一组接口</b>，方便我们使用TCP/IP协议。</p><p><b>服务器的一个端口是可以处理多个tcp连接的。</b>这个还困扰了我很久，因为连接登录服务器是要利用服务器端的端口，我开始以为一个TCP连接会占用一个端口，那么多个用户的连接该如何处理，一个个的分配端口是不够用的，这当中的并发问题又该如何处理呢，原来一个服务器的一个端口是可以处理多个TCP连接的，为了区别不同的连接正好还用到了socket套接字。</p></blockquote></blockquote><blockquote><h2 id="6-并发"><a href="#6-并发" class="headerlink" title="6. 并发"></a>6. 并发</h2><blockquote><p>为了优化一个并发问题，特地去了解了一下线程池，来处理并发问题。<br> <code>`</code>java<br>public class UDPMessageServer implements Runnable {</p></blockquote></blockquote><pre><code>private DatagramPacket packet = null;public UDPMessageServer(DatagramPacket packet) {    this.packet = packet;}private static DatagramSocket datagramSocket = null;    // 启动服务器    public static void openServer() throws Exception {        datagramSocket = new DatagramSocket(4003);// 4003端口        // 制作线程池        ExecutorService execute = Executors.newFixedThreadPool(1000);        while (true) {            // 等待客户端的数据            byte[] b = new byte[1024 * 10];            DatagramPacket datagramPacket = new DatagramPacket(b, b.length);            datagramSocket.receive(datagramPacket);            ////////////////////////// ///////////////////            // 数据一到手，立马建立一个线程处理            execute.execute(new UDPMessageServer(datagramPacket));        }    }</code></pre><p>}<br><code>`</code></p><blockquote><h2 id="7-心跳包"><a href="#7-心跳包" class="headerlink" title="7. 心跳包"></a>7. 心跳包</h2><blockquote><p>用来检测用户是否在线,维护用户的socket信息。client的意外断开，server是不知道的。这样可以减少负载，节约资源。</p></blockquote></blockquote><blockquote><h2 id="8-分包"><a href="#8-分包" class="headerlink" title="8. 分包"></a>8. 分包</h2><blockquote><p><b>DAO</b></p><blockquote><p>UserDAO</p></blockquote><p><b>DAOImpl</b></p><blockquote><p>UserDAOImpl</p></blockquote><p><b>entity</b></p><blockquote><p>Config<br>Msg<br>UserInfo<br>UserInfo2<br>UserInfoOnline</p></blockquote><p>Exception</p><blockquote><p>PasswordException<br>StateException<br>UsernameException<br>UsernameNotFoundException</p></blockquote><p>server</p><blockquote><p>LoginServer<br>RegServer<br>Start<br>UDPMessageServer</p></blockquote><p>service</p><blockquote><p>FriendSelectService<br>MessagePool<br>MessageRegService.<br>MessageService<br>NetService<br>UserOnlineList<br>UserService</p></blockquote><p>UI</p><blockquote><p>ChatFrame<br>FaceJPanel<br>FaceUserJPanel<br>FriendListDialog<br>friendListJPanel<br>LoginDialog<br>PersonalDataFrame<br>RegistDialog<br>SelectFriendsFrame<br>UserListJPanel</p></blockquote><p>Util</p><blockquote><p>DBManager<br>Utils</p></blockquote></blockquote></blockquote><blockquote><h2 id="9-后续"><a href="#9-后续" class="headerlink" title="9. 后续"></a>9. 后续</h2><blockquote><ul><li>其实是有很多地方是有问题的，bug就不一一列举了，等下次有时间了，可以二次开发一下。</li><li>这个聊天目前还不能用，我已经找到问题所在了，写之前一定要理清楚架构什么的。</li><li>加一个多人聊天。</li><li>C/S与B/S写起来，思路上是大同小异，但是同样的功能C/S端学起来要麻烦一些。都要归功与tomcat的作用。</li></ul></blockquote></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
